{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Animius Docs WIP","title":"Home"},{"location":"#welcome-to-animius-docs","text":"WIP","title":"Welcome to Animius Docs"},{"location":"about/","text":"De nec cadunt est undique illa ille Pecoris aequore Lorem markdownum laevum hoste, Arcton convocat sanesque silva agro, Pandione ego bellica ? Mihi esse obortis, in pondus sancta duratur uvae dum! Captus casside. Audete illi in rebus in adulantum tuli, in subde interserit, per. Quamvis et ferocis nostri lingua ! Cacumine tum paranti, praefractam haec spargit. Templi modo latentes duxerat et arma. Pone bene pectore forma Tiberinus animalia quamvis? Pectus sub iacit tuebere ad altior. 1 2 3 syncDrive.win_intranet = dns; var tcpSiteWrap = 5; smartTerminal.jqueryCpm += wordart; At aurea molibus Florem in est? Aera suo, sunto amas sanguine altaribus venter mea, nobis utque eras ab. Lucis est pectus catenas nequeunt unguibus pecudes lucis et patientem quae adiutis lacrimabile potest nubigenasque mente. Viri tuum nova positoque, illo sic, iusserat mihi caelo vivunt vel sepulti omnis locum volucrumque adde; fixa. Alte demittere ad inter poenam orbator. Discedite moenia sustinet officio mihi annis super, et honor et longum dempto postquam tot dolens! Tibi auras Tauros et inmensae tuo pumice moventur illo adflatuque signum ; ait media erat amans, auras? Gemitu Teucri Stabiasque dextris nate verba victor. Nate quam vellem, Turnus it mendacem datur Arethusa, dixerat referemus aevumque. 1 2 3 var source = disk(barcraftGrep, sectorWired, 80); web_hfs_bar += raw; hover_megabit(copyright_pcmcia, smishing, modem_hard_user + dvd / petabyte); Tollere parta. Dianam optima cum vasto sanguine Persei hospitio consorte animam. Animum pugnae unus pavidamque tellure, vetitorum crearit: quoque rex pater adiectoque quae verba coloribus milibus procul ; nimiumque. Mentem ut utque finibus Aesaris fiducia perfundit terrent est exiguam regna exsistunt, officium , Iunone. Qua cumque notas tuae damnantem ultima spissus quid hos sinit: inpensior.","title":"About"},{"location":"about/#de-nec-cadunt-est-undique-illa-ille","text":"","title":"De nec cadunt est undique illa ille"},{"location":"about/#pecoris-aequore","text":"Lorem markdownum laevum hoste, Arcton convocat sanesque silva agro, Pandione ego bellica ? Mihi esse obortis, in pondus sancta duratur uvae dum! Captus casside. Audete illi in rebus in adulantum tuli, in subde interserit, per. Quamvis et ferocis nostri lingua ! Cacumine tum paranti, praefractam haec spargit. Templi modo latentes duxerat et arma. Pone bene pectore forma Tiberinus animalia quamvis? Pectus sub iacit tuebere ad altior. 1 2 3 syncDrive.win_intranet = dns; var tcpSiteWrap = 5; smartTerminal.jqueryCpm += wordart;","title":"Pecoris aequore"},{"location":"about/#at-aurea-molibus","text":"Florem in est? Aera suo, sunto amas sanguine altaribus venter mea, nobis utque eras ab. Lucis est pectus catenas nequeunt unguibus pecudes lucis et patientem quae adiutis lacrimabile potest nubigenasque mente. Viri tuum nova positoque, illo sic, iusserat mihi caelo vivunt vel sepulti omnis locum volucrumque adde; fixa. Alte demittere ad inter poenam orbator. Discedite moenia sustinet officio mihi annis super, et honor et longum dempto postquam tot dolens!","title":"At aurea molibus"},{"location":"about/#tibi-auras","text":"Tauros et inmensae tuo pumice moventur illo adflatuque signum ; ait media erat amans, auras? Gemitu Teucri Stabiasque dextris nate verba victor. Nate quam vellem, Turnus it mendacem datur Arethusa, dixerat referemus aevumque. 1 2 3 var source = disk(barcraftGrep, sectorWired, 80); web_hfs_bar += raw; hover_megabit(copyright_pcmcia, smishing, modem_hard_user + dvd / petabyte); Tollere parta. Dianam optima cum vasto sanguine Persei hospitio consorte animam. Animum pugnae unus pavidamque tellure, vetitorum crearit: quoque rex pater adiectoque quae verba coloribus milibus procul ; nimiumque. Mentem ut utque finibus Aesaris fiducia perfundit terrent est exiguam regna exsistunt, officium , Iunone. Qua cumque notas tuae damnantem ultima spissus quid hos sinit: inpensior.","title":"Tibi auras"},{"location":"commands/console/","text":"Console save Save the console. (This does not save individual items such as models and waifus.) 1 save No argument required. sliceAudio Loading subtitle and slicing audio. 1 sliceAudio -sp 'subtitle.ass' -ap 'test.mp3' -s 'some\\\\path\\\\save\\\\' -sp, --subtitle_path ( str ) -- Path to subtitle file -ap, --audio_path ( str ) -- Path to audio file -s, --save_path ( str ) -- Path to save audio","title":"Console"},{"location":"commands/console/#console","text":"","title":"Console"},{"location":"commands/console/#save","text":"Save the console. (This does not save individual items such as models and waifus.) 1 save No argument required.","title":"save"},{"location":"commands/console/#sliceaudio","text":"Loading subtitle and slicing audio. 1 sliceAudio -sp 'subtitle.ass' -ap 'test.mp3' -s 'some\\\\path\\\\save\\\\' -sp, --subtitle_path ( str ) -- Path to subtitle file -ap, --audio_path ( str ) -- Path to audio file -s, --save_path ( str ) -- Path to save audio","title":"sliceAudio"},{"location":"commands/data/","text":"Data Overview getData Get a list of existing data. 1 getData No argument required. createData Create a data with empty values. 1 createData -n 'data name' -t 'ModelType' -c 'model config name' Keyword Arguments: -n, --name ( str ) -- Name of data -t, --type ( str ) -- Type of data (based on the model) -c, --model_config ( str ) -- Name of model config dataAddEmbedding Add word embedding to data 1 dataAddEmbedding -n 'data name' -e 'embedding name' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -e, --embedding ( str ) -- Name of embedding dataReset Reset a data, clearing all stored data values. 1 dataReset -n 'data name' Keyword Arguments: -n, --name ( str ) -- Name of data to reset deleteData Delete a data. 1 deleteData -n 'data name' Keyword Arguments: -n, --name ( str ) -- Name of data to delete saveData Save a data. 1 saveData -n 'data name' Keyword Arguments: -n, --name ( str ) -- Name of data to save loadData Load a data. 1 loadData -n 'data name' Keyword Arguments: -n, --name ( str ) -- Name of data to load exportData Export a data to zip file. 1 exportData -n 'data name' -p 'some\\path\\to\\export\\' Keyword Arguments: -n, --name ( str ) -- Name of data to export -p, --path ( str ) -- Path to export file importData Import a data from zip file. 1 importModel - n 'data name' - p 'some\\path\\to\\export\\data_name.zip' Keyword Arguments: -n, --name ( str ) -- Name of data to import -p, --path ( str ) -- Path to import file getData Get a list of existing data. 1 getData No argument required. This command returns a dictionary of which the keys are the name of data and the values are the details. The details will be empty if the data is not loaded. 1 2 3 4 5 6 { \"data_name\": { \"name\": \"data_name\", \"type\": \"<class 'data _class'>\" } } getDataDetails Return the details of a data. 1 getDataDetails -n 'data name' Keyword Arguments: -n, --name ( str ) -- Name of data 1 2 3 4 5 6 7 8 9 10 { 'model_config_saved_directory': 'resources\\\\model_configs', 'model_config_saved_name': 'model_config_name', 'model_config_name': 'model_config_name', 'embedding_saved_directory': 'resources\\\\embeddings\\\\embedding_name', 'embedding_saved_name': 'embedding_name', 'embedding_name': 'embedding_name', 'cls': 'ChatbotData', 'values': ['arr_0', 'embedding'] } Chatbot Data chatbotDataAddTwitter Add twitter dataset to a chatbot data. 1 chatbotDataAddTwitter -n 'data name' -p '\\some\\path\\twitter.txt' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -p, --path ( str ) -- Path to twitter file chatbotDataAddCornell Add Cornell dataset to a chatbot data. 1 chatbotDataAddCornell -n 'data name' -mcp '\\some\\cornell\\movie_conversations.txt' -mlp '\\some\\cornell\\movie_lines.txt' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -mcp, --movie_conversations_path ( str ) -- Path to movie_conversations.txt in the Cornell dataset -mlp, --movie_lines_path ( str ) -- Path to movie_lines.txt in the Cornell dataset chatbotDataAddParseSentences Parse raw sentences and add them to a chatbot data. 1 chatbotDataAddParseSentences -n 'data name' -x '[\"some input\"]' -y '[\"some output\"]' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -x, --x ( list<str> ) -- List of strings, each representing a sentence input -y, --y ( list<str> ) -- List of strings, each representing a sentence output chatbotDataAddParseFile Parse raw sentences from text files and add them to a chatbot data. 1 chatbotDataAddParseFile -n 'data name' -x '\\some\\path\\x.txt' -y '\\some\\path\\y.txt' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -x, --x_path ( str ) -- Path to a UTF-8 file containing a raw sentence input on each line -y, --y_path ( str ) -- Path to a UTF-8 file containing a raw sentence output on each line chatbotDataAddParseInput Parse a raw sentence as input and add it to a chatbot data. 1 chatbotDataAddParseInput -n 'data name' -x 'hey how are you' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -x, --x ( str ) -- Raw sentence input chatbotDataSetParseInput Parse a raw sentence as input and set it as a chatbot data. 1 chatbotDataSetParseInput -n 'data name' -x 'hey how are you' Keyword Arguments: -n, --name ( str ) -- Name of data to set -x, --x ( str ) -- Raw sentence input IntentNER Data intentNERDataAddParseDatafolder Parse files from a folder and add them to a chatbot data. 1 intentNERDataAddParseDatafolder -n 'data name' -p '\\some\\path\\to\\intents' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -p, --path ( str ) -- Path to a folder contains input files intentNERDataAddParseInput Parse a raw sentence as input and add it to an intent NER data. 1 intentNERDataAddParseInput -n 'data name' -x 'hey how are you' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -x, --x ( str ) -- Raw sentence input intentNERDataSetParseInput Parse a raw sentence as input and set it as an intent NER data. 1 intentNERDataSetParseInput -n 'data name' -x 'hey how are you' Keyword Arguments: -n, --name ( str ) -- Name of data to set -x, --x ( str ) -- Raw sentence input SpeakerVerification Data speakerVerificationDataAddDataPaths Parse and add raw audio files to a speaker verification data. 1 speakerVerificationDataAddDataPaths -n 'data name' -p '[\"\\some\\path\\01.wav\"]' [-y True] Keyword Arguments: -n, --name ( str ) -- Name of data to add on -p, -path ( list<str> ) -- List of string paths to raw audio files -y, --y ( bool ) -- The label (True for is speaker and vice versa) of the audio files. Include for training, leave out for prediction. (Optional) speakerVerificationDataAddDataFile Read paths to raw audio files and add them to a speaker verification data. 1 speakerVerificationDataAddDataFile -n 'data name' -p '\\some\\path\\audios.txt' -y True Keyword Arguments: -n, --name ( str ) -- Name of data to add on -p, --path ( str ) -- Path to file containing a path of a raw audio file on each line -y, --y ( bool ) -- The label (True for is speaker and vice versa) of the audio files. Include for training, leave out for prediction. (Optional)","title":"Data"},{"location":"commands/data/#data","text":"","title":"Data"},{"location":"commands/data/#overview","text":"","title":"Overview"},{"location":"commands/data/#getdata","text":"Get a list of existing data. 1 getData No argument required.","title":"getData"},{"location":"commands/data/#createdata","text":"Create a data with empty values. 1 createData -n 'data name' -t 'ModelType' -c 'model config name' Keyword Arguments: -n, --name ( str ) -- Name of data -t, --type ( str ) -- Type of data (based on the model) -c, --model_config ( str ) -- Name of model config","title":"createData"},{"location":"commands/data/#dataaddembedding","text":"Add word embedding to data 1 dataAddEmbedding -n 'data name' -e 'embedding name' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -e, --embedding ( str ) -- Name of embedding","title":"dataAddEmbedding"},{"location":"commands/data/#datareset","text":"Reset a data, clearing all stored data values. 1 dataReset -n 'data name' Keyword Arguments: -n, --name ( str ) -- Name of data to reset","title":"dataReset"},{"location":"commands/data/#deletedata","text":"Delete a data. 1 deleteData -n 'data name' Keyword Arguments: -n, --name ( str ) -- Name of data to delete","title":"deleteData"},{"location":"commands/data/#savedata","text":"Save a data. 1 saveData -n 'data name' Keyword Arguments: -n, --name ( str ) -- Name of data to save","title":"saveData"},{"location":"commands/data/#loaddata","text":"Load a data. 1 loadData -n 'data name' Keyword Arguments: -n, --name ( str ) -- Name of data to load","title":"loadData"},{"location":"commands/data/#exportdata","text":"Export a data to zip file. 1 exportData -n 'data name' -p 'some\\path\\to\\export\\' Keyword Arguments: -n, --name ( str ) -- Name of data to export -p, --path ( str ) -- Path to export file","title":"exportData"},{"location":"commands/data/#importdata","text":"Import a data from zip file. 1 importModel - n 'data name' - p 'some\\path\\to\\export\\data_name.zip' Keyword Arguments: -n, --name ( str ) -- Name of data to import -p, --path ( str ) -- Path to import file","title":"importData"},{"location":"commands/data/#getdata_1","text":"Get a list of existing data. 1 getData No argument required. This command returns a dictionary of which the keys are the name of data and the values are the details. The details will be empty if the data is not loaded. 1 2 3 4 5 6 { \"data_name\": { \"name\": \"data_name\", \"type\": \"<class 'data _class'>\" } }","title":"getData"},{"location":"commands/data/#getdatadetails","text":"Return the details of a data. 1 getDataDetails -n 'data name' Keyword Arguments: -n, --name ( str ) -- Name of data 1 2 3 4 5 6 7 8 9 10 { 'model_config_saved_directory': 'resources\\\\model_configs', 'model_config_saved_name': 'model_config_name', 'model_config_name': 'model_config_name', 'embedding_saved_directory': 'resources\\\\embeddings\\\\embedding_name', 'embedding_saved_name': 'embedding_name', 'embedding_name': 'embedding_name', 'cls': 'ChatbotData', 'values': ['arr_0', 'embedding'] }","title":"getDataDetails"},{"location":"commands/data/#chatbot-data","text":"","title":"Chatbot Data"},{"location":"commands/data/#chatbotdataaddtwitter","text":"Add twitter dataset to a chatbot data. 1 chatbotDataAddTwitter -n 'data name' -p '\\some\\path\\twitter.txt' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -p, --path ( str ) -- Path to twitter file","title":"chatbotDataAddTwitter"},{"location":"commands/data/#chatbotdataaddcornell","text":"Add Cornell dataset to a chatbot data. 1 chatbotDataAddCornell -n 'data name' -mcp '\\some\\cornell\\movie_conversations.txt' -mlp '\\some\\cornell\\movie_lines.txt' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -mcp, --movie_conversations_path ( str ) -- Path to movie_conversations.txt in the Cornell dataset -mlp, --movie_lines_path ( str ) -- Path to movie_lines.txt in the Cornell dataset","title":"chatbotDataAddCornell"},{"location":"commands/data/#chatbotdataaddparsesentences","text":"Parse raw sentences and add them to a chatbot data. 1 chatbotDataAddParseSentences -n 'data name' -x '[\"some input\"]' -y '[\"some output\"]' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -x, --x ( list<str> ) -- List of strings, each representing a sentence input -y, --y ( list<str> ) -- List of strings, each representing a sentence output","title":"chatbotDataAddParseSentences"},{"location":"commands/data/#chatbotdataaddparsefile","text":"Parse raw sentences from text files and add them to a chatbot data. 1 chatbotDataAddParseFile -n 'data name' -x '\\some\\path\\x.txt' -y '\\some\\path\\y.txt' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -x, --x_path ( str ) -- Path to a UTF-8 file containing a raw sentence input on each line -y, --y_path ( str ) -- Path to a UTF-8 file containing a raw sentence output on each line","title":"chatbotDataAddParseFile"},{"location":"commands/data/#chatbotdataaddparseinput","text":"Parse a raw sentence as input and add it to a chatbot data. 1 chatbotDataAddParseInput -n 'data name' -x 'hey how are you' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -x, --x ( str ) -- Raw sentence input","title":"chatbotDataAddParseInput"},{"location":"commands/data/#chatbotdatasetparseinput","text":"Parse a raw sentence as input and set it as a chatbot data. 1 chatbotDataSetParseInput -n 'data name' -x 'hey how are you' Keyword Arguments: -n, --name ( str ) -- Name of data to set -x, --x ( str ) -- Raw sentence input","title":"chatbotDataSetParseInput"},{"location":"commands/data/#intentner-data","text":"","title":"IntentNER Data"},{"location":"commands/data/#intentnerdataaddparsedatafolder","text":"Parse files from a folder and add them to a chatbot data. 1 intentNERDataAddParseDatafolder -n 'data name' -p '\\some\\path\\to\\intents' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -p, --path ( str ) -- Path to a folder contains input files","title":"intentNERDataAddParseDatafolder"},{"location":"commands/data/#intentnerdataaddparseinput","text":"Parse a raw sentence as input and add it to an intent NER data. 1 intentNERDataAddParseInput -n 'data name' -x 'hey how are you' Keyword Arguments: -n, --name ( str ) -- Name of data to add on -x, --x ( str ) -- Raw sentence input","title":"intentNERDataAddParseInput"},{"location":"commands/data/#intentnerdatasetparseinput","text":"Parse a raw sentence as input and set it as an intent NER data. 1 intentNERDataSetParseInput -n 'data name' -x 'hey how are you' Keyword Arguments: -n, --name ( str ) -- Name of data to set -x, --x ( str ) -- Raw sentence input","title":"intentNERDataSetParseInput"},{"location":"commands/data/#speakerverification-data","text":"","title":"SpeakerVerification Data"},{"location":"commands/data/#speakerverificationdataadddatapaths","text":"Parse and add raw audio files to a speaker verification data. 1 speakerVerificationDataAddDataPaths -n 'data name' -p '[\"\\some\\path\\01.wav\"]' [-y True] Keyword Arguments: -n, --name ( str ) -- Name of data to add on -p, -path ( list<str> ) -- List of string paths to raw audio files -y, --y ( bool ) -- The label (True for is speaker and vice versa) of the audio files. Include for training, leave out for prediction. (Optional)","title":"speakerVerificationDataAddDataPaths"},{"location":"commands/data/#speakerverificationdataadddatafile","text":"Read paths to raw audio files and add them to a speaker verification data. 1 speakerVerificationDataAddDataFile -n 'data name' -p '\\some\\path\\audios.txt' -y True Keyword Arguments: -n, --name ( str ) -- Name of data to add on -p, --path ( str ) -- Path to file containing a path of a raw audio file on each line -y, --y ( bool ) -- The label (True for is speaker and vice versa) of the audio files. Include for training, leave out for prediction. (Optional)","title":"speakerVerificationDataAddDataFile"},{"location":"commands/embedding/","text":"Embedding getEmbeddings Get a list of existing word embeddings. 1 getEmbeddings No argument required. createEmbedding Create a word embedding. 1 createEmbedding -n 'embedding name' -p '\\some\\path\\embedding.txt' [-v 100000] Keyword Arguments: -n, --name ( str ) -- Name of embedding -p, --path ( str ) -- Path to embedding file -v, --vocab_size ( int ) -- Maximum number of tokens to read from embedding file (Optional) deleteEmbedding Delete a word embedding. 1 deleteEmbedding -n 'embedding name' Keyword Arguments: -n, --name ( str ) -- Name of embedding to delete saveEmbedding Save an embedding. 1 saveEmbedding -n 'embedding name' Keyword Arguments: -n, --name ( str ) -- Name of embedding to save loadEmbedding Load an embedding. 1 loadEmbedding -n 'embedding name' Keyword Arguments: -n, --name ( str ) -- Name of embedding to load","title":"Embedding"},{"location":"commands/embedding/#embedding","text":"","title":"Embedding"},{"location":"commands/embedding/#getembeddings","text":"Get a list of existing word embeddings. 1 getEmbeddings No argument required.","title":"getEmbeddings"},{"location":"commands/embedding/#createembedding","text":"Create a word embedding. 1 createEmbedding -n 'embedding name' -p '\\some\\path\\embedding.txt' [-v 100000] Keyword Arguments: -n, --name ( str ) -- Name of embedding -p, --path ( str ) -- Path to embedding file -v, --vocab_size ( int ) -- Maximum number of tokens to read from embedding file (Optional)","title":"createEmbedding"},{"location":"commands/embedding/#deleteembedding","text":"Delete a word embedding. 1 deleteEmbedding -n 'embedding name' Keyword Arguments: -n, --name ( str ) -- Name of embedding to delete","title":"deleteEmbedding"},{"location":"commands/embedding/#saveembedding","text":"Save an embedding. 1 saveEmbedding -n 'embedding name' Keyword Arguments: -n, --name ( str ) -- Name of embedding to save","title":"saveEmbedding"},{"location":"commands/embedding/#loadembedding","text":"Load an embedding. 1 loadEmbedding -n 'embedding name' Keyword Arguments: -n, --name ( str ) -- Name of embedding to load","title":"loadEmbedding"},{"location":"commands/model config/","text":"Model Config createModelConfig Create a model config with the provided values. 1 createModelConfig -n 'model config name' -t 'type' [-c '{\"some_key\": \"some_value\"}'] [-h '{}'] [-ms '{}'] Keyword Arguements: -n, --name ( str ) -- Name of model config -t, --type ( str ) -- Name of the model type -c, --config ( dict ) -- Dictionary of config values (Optional) -h, --hyperparameters ( dict ) -- Dictionary of hyperparameters values (Optional) -s, --model_structure ( dict ) -- Dictionary of model_structure values (Optional) editModelConfig Update a model config with provided values. Either providing full dict of configs or changing specific values is allowed. 1 2 3 editModelConfig -n 'model config name' [-c '{\"some_key\": \"some_value\"}'] [-h '{}'] [-s '{}'] editModelConfig -n 'model config name' [-bs 1024] [-lr 0.1] [-d '/gpu:0'] Keyword Arguments: -n, --name ( str ) -- Name of model config to edit -c, --config ( dict ) -- Dictionary containing the updated config values (Optional) -h, --hyperparameters ( dict ) -- Dictionary containing the updated hyperparameters values (Optional) -s, --model_structure ( dict ) -- Dictionary containing the updated model structure values (Optional) -d, --device ( str ) -- Name of device to use (Optional) -cls, --class ( str ) -- Model class (Optional) -e, --epoch ( int ) -- Number of epoches (Optional) -cost, --cost (``) -- config.cost (Optional) -ds, --display_step (``) -- config.display_step (Optional) -tb, --tensorboard (``) -- config.tensorboard (Optional) -lr, --learning_rate ( float ) -- Learning rate (Optional) -bs, --batch_size ( int ) -- Batch size (Optional) -op, --optimizer ( str ) -- Name of optimizer (Optional) -ms, --max_sequence ( int ) -- model_structure.max_sequence (Optional) -nh, --n_hidden ( int ) -- model_structure.n_hidden (Optional) -gc, --gradient_clip ( float ) -- model_structure.gradient_clip (Optional) -no, --node ( str ) -- model_structure.node (Optional) -nio, --n_intent_output ( int ) -- model_structure.n_intent_output (Optional) -nno, --n_ner_output ( int ) -- model_structure.n_ner_output (Optional) -l, --layer ( int ) -- Number of layers (Optional) -bw, --beam_width ( int ) -- Beam width (Optional) -fs1, --filter_size_1 ( int ) -- model_structure.filter_size_1 (Optional) -fs2, --filter_size_2 ( int ) -- model_structure.filter_size_2 (Optional) -nf1, --num_filter_1 ( int ) -- model_structure.num_filter_1 (Optional) -nf2, --num_filter_2 ( int ) -- model_structure.num_filter_2 (Optional) -ps1, --pool_size_1 ( int ) -- model_structure.pool_size_1 (Optional) -pt, --pool_type ( str ) -- model_structure.pool_type (Optional) -fc1, --fully_connected_1 ( int ) -- model_structure.fully_connect_1 (Optional) -iw, --input_window ( int ) -- model_structure.input_window (Optional) -ic, --input_cepstral ( int ) -- model_structure.input_cepstral (Optional) deleteModelConfig Delete a model config. 1 deleteModelConfig -n 'model config name' Keyword Argument: -n, --name ( str ) -- Name of model config to delete saveModelConfig Save a model config. 1 saveModelConfig -n 'model config name' Keyword Argument: -n, --name ( str ) -- Name of model config to save loadModelConfig Load a model config. 1 loadModelConfig -n 'model config name' Keyword Argument: -n, --name ( str ) -- Name of model config to load exportModelConfig Export a model config to zip file. 1 exportModelConfig -n 'model config name' -p 'some\\path\\to\\export\\' Keyword Arguments: -n, --name ( str ) -- Name of model config to export -p, --path ( str ) -- Path to export file importModelConfig Import a model config from zip file. 1 importModel - n 'model name' - p 'some\\path\\to\\export\\model_name.zip' Keyword Arguments: -n, --name ( str ) -- Name of model config to export -p, --path ( str ) -- Path to import file getModelConfigs Get a list of existing model configs. 1 getModelConfigs No argument required. The details will be empty if the model is not loaded. 1 2 3 4 5 { \"model_config_name\": { \"name\": \"model_config_name\" } } getModelConfigDetails Get the details of a model config. 1 getModelConfigDetails -n 'model config name' Keyword Arguments: -n, --name ( str ) -- Name of model config This command returns a dictionary of details of a model config, which contains configs, hyperparameters, structures, saved name and saved directory of the model config. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { 'config': { 'device': '/gpu:0', 'class': 'IntentNER', 'epoch': 0, 'cost': None, 'display_step': 1, 'tensorboard': None, 'hyperdash': None, 'graph': 'resources\\\\models\\\\model_name\\\\model_name_graph.pb', 'frozen_graph': 'resources\\\\models\\\\model_name\\\\frozen_model.pb' }, 'model_structure': { 'max_sequence': 20, 'n_hidden': 128, 'gradient_clip': 5.0, 'node': 'gru', 'n_intent_output': 15, 'n_ner_output': 8, 'n_vector': 303, 'word_count': 100000 }, 'hyperparamter': { 'learning_rate': 0.003, 'batch_size': 1024, 'optimizer': 'adam' }, 'saved_directory': 'resources\\\\models\\\\model_name', 'saved_name': 'model_name' }","title":"Model Config"},{"location":"commands/model config/#model-config","text":"","title":"Model Config"},{"location":"commands/model config/#createmodelconfig","text":"Create a model config with the provided values. 1 createModelConfig -n 'model config name' -t 'type' [-c '{\"some_key\": \"some_value\"}'] [-h '{}'] [-ms '{}'] Keyword Arguements: -n, --name ( str ) -- Name of model config -t, --type ( str ) -- Name of the model type -c, --config ( dict ) -- Dictionary of config values (Optional) -h, --hyperparameters ( dict ) -- Dictionary of hyperparameters values (Optional) -s, --model_structure ( dict ) -- Dictionary of model_structure values (Optional)","title":"createModelConfig"},{"location":"commands/model config/#editmodelconfig","text":"Update a model config with provided values. Either providing full dict of configs or changing specific values is allowed. 1 2 3 editModelConfig -n 'model config name' [-c '{\"some_key\": \"some_value\"}'] [-h '{}'] [-s '{}'] editModelConfig -n 'model config name' [-bs 1024] [-lr 0.1] [-d '/gpu:0'] Keyword Arguments: -n, --name ( str ) -- Name of model config to edit -c, --config ( dict ) -- Dictionary containing the updated config values (Optional) -h, --hyperparameters ( dict ) -- Dictionary containing the updated hyperparameters values (Optional) -s, --model_structure ( dict ) -- Dictionary containing the updated model structure values (Optional) -d, --device ( str ) -- Name of device to use (Optional) -cls, --class ( str ) -- Model class (Optional) -e, --epoch ( int ) -- Number of epoches (Optional) -cost, --cost (``) -- config.cost (Optional) -ds, --display_step (``) -- config.display_step (Optional) -tb, --tensorboard (``) -- config.tensorboard (Optional) -lr, --learning_rate ( float ) -- Learning rate (Optional) -bs, --batch_size ( int ) -- Batch size (Optional) -op, --optimizer ( str ) -- Name of optimizer (Optional) -ms, --max_sequence ( int ) -- model_structure.max_sequence (Optional) -nh, --n_hidden ( int ) -- model_structure.n_hidden (Optional) -gc, --gradient_clip ( float ) -- model_structure.gradient_clip (Optional) -no, --node ( str ) -- model_structure.node (Optional) -nio, --n_intent_output ( int ) -- model_structure.n_intent_output (Optional) -nno, --n_ner_output ( int ) -- model_structure.n_ner_output (Optional) -l, --layer ( int ) -- Number of layers (Optional) -bw, --beam_width ( int ) -- Beam width (Optional) -fs1, --filter_size_1 ( int ) -- model_structure.filter_size_1 (Optional) -fs2, --filter_size_2 ( int ) -- model_structure.filter_size_2 (Optional) -nf1, --num_filter_1 ( int ) -- model_structure.num_filter_1 (Optional) -nf2, --num_filter_2 ( int ) -- model_structure.num_filter_2 (Optional) -ps1, --pool_size_1 ( int ) -- model_structure.pool_size_1 (Optional) -pt, --pool_type ( str ) -- model_structure.pool_type (Optional) -fc1, --fully_connected_1 ( int ) -- model_structure.fully_connect_1 (Optional) -iw, --input_window ( int ) -- model_structure.input_window (Optional) -ic, --input_cepstral ( int ) -- model_structure.input_cepstral (Optional)","title":"editModelConfig"},{"location":"commands/model config/#deletemodelconfig","text":"Delete a model config. 1 deleteModelConfig -n 'model config name' Keyword Argument: -n, --name ( str ) -- Name of model config to delete","title":"deleteModelConfig"},{"location":"commands/model config/#savemodelconfig","text":"Save a model config. 1 saveModelConfig -n 'model config name' Keyword Argument: -n, --name ( str ) -- Name of model config to save","title":"saveModelConfig"},{"location":"commands/model config/#loadmodelconfig","text":"Load a model config. 1 loadModelConfig -n 'model config name' Keyword Argument: -n, --name ( str ) -- Name of model config to load","title":"loadModelConfig"},{"location":"commands/model config/#exportmodelconfig","text":"Export a model config to zip file. 1 exportModelConfig -n 'model config name' -p 'some\\path\\to\\export\\' Keyword Arguments: -n, --name ( str ) -- Name of model config to export -p, --path ( str ) -- Path to export file","title":"exportModelConfig"},{"location":"commands/model config/#importmodelconfig","text":"Import a model config from zip file. 1 importModel - n 'model name' - p 'some\\path\\to\\export\\model_name.zip' Keyword Arguments: -n, --name ( str ) -- Name of model config to export -p, --path ( str ) -- Path to import file","title":"importModelConfig"},{"location":"commands/model config/#getmodelconfigs","text":"Get a list of existing model configs. 1 getModelConfigs No argument required. The details will be empty if the model is not loaded. 1 2 3 4 5 { \"model_config_name\": { \"name\": \"model_config_name\" } }","title":"getModelConfigs"},{"location":"commands/model config/#getmodelconfigdetails","text":"Get the details of a model config. 1 getModelConfigDetails -n 'model config name' Keyword Arguments: -n, --name ( str ) -- Name of model config This command returns a dictionary of details of a model config, which contains configs, hyperparameters, structures, saved name and saved directory of the model config. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { 'config': { 'device': '/gpu:0', 'class': 'IntentNER', 'epoch': 0, 'cost': None, 'display_step': 1, 'tensorboard': None, 'hyperdash': None, 'graph': 'resources\\\\models\\\\model_name\\\\model_name_graph.pb', 'frozen_graph': 'resources\\\\models\\\\model_name\\\\frozen_model.pb' }, 'model_structure': { 'max_sequence': 20, 'n_hidden': 128, 'gradient_clip': 5.0, 'node': 'gru', 'n_intent_output': 15, 'n_ner_output': 8, 'n_vector': 303, 'word_count': 100000 }, 'hyperparamter': { 'learning_rate': 0.003, 'batch_size': 1024, 'optimizer': 'adam' }, 'saved_directory': 'resources\\\\models\\\\model_name', 'saved_name': 'model_name' }","title":"getModelConfigDetails"},{"location":"commands/model/","text":"Model The following section describe the commands related to Models. Defined in animius\\Console.py createModel Create a model. 1 createModel -n 'model name' -t 'ModelType' -c 'model_config name' -d 'data name Keyword Arguments: -n, --name ( str ) -- Name of model -t, --type ( str ) -- Type of model -c, --model_config ( str ) -- Name of model config to use -d, --data ( str ) -- Name of data to use -i, --intent_ner_model * ( str ) -- (Optional) Name of IntentNER Model (Only required for creating CombinedChatbot Model) Here's a list of model types. Chatbot: am.Chatbot.ChatbotModel() CombinedChatbot: animius.Chatbot.CombinedChatbotModel() IntentNER: animius.IntentNER.IntentNERModel() SpeakerVerification: animius.SpeakerVerification.SpeakerVerificationModel() deleteModel Delete a model. 1 deleteModel -n 'model name' Keyword Arguments: -n, --name ( str ) -- Name of model to delete saveModel Save a model. The graph is saved in '\\resource\\model_name\\model_name_graph.pb' 1 saveModel -n 'model name' -g True Keyword Arguments: -n, --name ( str ) -- Name of model to save -g, --graph ( bool ) -- Whether to save the graph loadModel Load a model. 1 loadModel -n 'model name' -d 'data name' Keyword Arguments: -n, --name ( str ) -- Name of model to load -d, --data ( str ) -- Name of data to set to model exportModel Export a model to zip file. 1 exportModel -n 'model name' -p 'some\\path\\to\\export\\' Keyword Arguments: -n, --name ( str ) -- Name of model to export -p, --path ( str ) -- Path to export file importModel Import a model from zip file. 1 importModel - n 'model name' - p 'some\\path\\to\\export\\model_name.zip' Keyword Arguments: -n, --name ( str ) -- Name of model to export -p, --path ( str ) -- Path to import file getModels Get a list of existing models. 1 getModels No argument required. This command returns a dictionary of which the keys are the name of models and the values are the details. The details will be empty if the model is not loaded. 1 2 3 4 5 6 { \"model_name\": { \"name\": \"model_name\", \"type\": \"<class 'model_class'>\" } } getModelDetails Get the details of a model. 1 getModelDetails -n 'model name' Keyword Arguments: -n, --name ( str ) -- Name of model This command returns a dictionary of details of a model, which contains configs, hyperparameters, structures, saved name and saved directory of the model. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { 'config': { 'device': '/gpu:0', 'class': 'IntentNER', 'epoch': 0, 'cost': None, 'display_step': 1, 'tensorboard': None, 'hyperdash': None, 'graph': 'resources\\\\models\\\\model_name\\\\model_name_graph.pb', 'frozen_graph': 'resources\\\\models\\\\model_name\\\\frozen_model.pb' }, 'model_structure': { 'max_sequence': 20, 'n_hidden': 128, 'gradient_clip': 5.0, 'node': 'gru', 'n_intent_output': 15, 'n_ner_output': 8, 'n_vector': 303, 'word_count': 100000 }, 'hyperparamter': { 'learning_rate': 0.003, 'batch_size': 1024, 'optimizer': 'adam' }, 'saved_directory': 'resources\\\\models\\\\model_name', 'saved_name': 'model_name' } setData Set model data. 1 setData -n 'model name' -d 'data name' Keyword Arguments: -n, --name ( str ) -- Name of model -d, --data ( str ) -- Name of data train Train a model. The training process will be held in another thread. The training device is defined in the model config. 1 train -n 'model name' -e 10 Keyword Arguments: -n, --name ( str ) -- Name of model to train -e, --epoch ( int ) -- Number of epochs to train for stopTraining Cancel training a model. The model will stop once it finishes the current epoch. 1 stopTraining -n 'model name' Keyword Arguments: -n, --name ( str ) -- Name of model to stop predict Make predictions with a model. 1 predict -n 'model name' -i 'name of input data' -s '\\some\\path.txt' Keyword Arguments: -n, --name ( str ) -- Name of model -i, --input_data ( str ) -- Name of input data -s, --save_path ( str ) -- Path to save result (Optional) freezeGraph Freeze Tensorflow graph and latest checkpoint to 'resource\\model_name\\frozen_model.pb'. 1 freezeGraph -n 'model name' Keyword Arguments: -n, --name ( str ) -- Name of model optimize Optimize a frozen model (see FreezeGraph) for inference. 1 optimize -n 'model name' Keyword Arguments: -n, --name ( str ) -- Name of model","title":"Model"},{"location":"commands/model/#model","text":"The following section describe the commands related to Models. Defined in animius\\Console.py","title":"Model"},{"location":"commands/model/#createmodel","text":"Create a model. 1 createModel -n 'model name' -t 'ModelType' -c 'model_config name' -d 'data name Keyword Arguments: -n, --name ( str ) -- Name of model -t, --type ( str ) -- Type of model -c, --model_config ( str ) -- Name of model config to use -d, --data ( str ) -- Name of data to use -i, --intent_ner_model * ( str ) -- (Optional) Name of IntentNER Model (Only required for creating CombinedChatbot Model) Here's a list of model types. Chatbot: am.Chatbot.ChatbotModel() CombinedChatbot: animius.Chatbot.CombinedChatbotModel() IntentNER: animius.IntentNER.IntentNERModel() SpeakerVerification: animius.SpeakerVerification.SpeakerVerificationModel()","title":"createModel"},{"location":"commands/model/#deletemodel","text":"Delete a model. 1 deleteModel -n 'model name' Keyword Arguments: -n, --name ( str ) -- Name of model to delete","title":"deleteModel"},{"location":"commands/model/#savemodel","text":"Save a model. The graph is saved in '\\resource\\model_name\\model_name_graph.pb' 1 saveModel -n 'model name' -g True Keyword Arguments: -n, --name ( str ) -- Name of model to save -g, --graph ( bool ) -- Whether to save the graph","title":"saveModel"},{"location":"commands/model/#loadmodel","text":"Load a model. 1 loadModel -n 'model name' -d 'data name' Keyword Arguments: -n, --name ( str ) -- Name of model to load -d, --data ( str ) -- Name of data to set to model","title":"loadModel"},{"location":"commands/model/#exportmodel","text":"Export a model to zip file. 1 exportModel -n 'model name' -p 'some\\path\\to\\export\\' Keyword Arguments: -n, --name ( str ) -- Name of model to export -p, --path ( str ) -- Path to export file","title":"exportModel"},{"location":"commands/model/#importmodel","text":"Import a model from zip file. 1 importModel - n 'model name' - p 'some\\path\\to\\export\\model_name.zip' Keyword Arguments: -n, --name ( str ) -- Name of model to export -p, --path ( str ) -- Path to import file","title":"importModel"},{"location":"commands/model/#getmodels","text":"Get a list of existing models. 1 getModels No argument required. This command returns a dictionary of which the keys are the name of models and the values are the details. The details will be empty if the model is not loaded. 1 2 3 4 5 6 { \"model_name\": { \"name\": \"model_name\", \"type\": \"<class 'model_class'>\" } }","title":"getModels"},{"location":"commands/model/#getmodeldetails","text":"Get the details of a model. 1 getModelDetails -n 'model name' Keyword Arguments: -n, --name ( str ) -- Name of model This command returns a dictionary of details of a model, which contains configs, hyperparameters, structures, saved name and saved directory of the model. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 { 'config': { 'device': '/gpu:0', 'class': 'IntentNER', 'epoch': 0, 'cost': None, 'display_step': 1, 'tensorboard': None, 'hyperdash': None, 'graph': 'resources\\\\models\\\\model_name\\\\model_name_graph.pb', 'frozen_graph': 'resources\\\\models\\\\model_name\\\\frozen_model.pb' }, 'model_structure': { 'max_sequence': 20, 'n_hidden': 128, 'gradient_clip': 5.0, 'node': 'gru', 'n_intent_output': 15, 'n_ner_output': 8, 'n_vector': 303, 'word_count': 100000 }, 'hyperparamter': { 'learning_rate': 0.003, 'batch_size': 1024, 'optimizer': 'adam' }, 'saved_directory': 'resources\\\\models\\\\model_name', 'saved_name': 'model_name' }","title":"getModelDetails"},{"location":"commands/model/#setdata","text":"Set model data. 1 setData -n 'model name' -d 'data name' Keyword Arguments: -n, --name ( str ) -- Name of model -d, --data ( str ) -- Name of data","title":"setData"},{"location":"commands/model/#train","text":"Train a model. The training process will be held in another thread. The training device is defined in the model config. 1 train -n 'model name' -e 10 Keyword Arguments: -n, --name ( str ) -- Name of model to train -e, --epoch ( int ) -- Number of epochs to train for","title":"train"},{"location":"commands/model/#stoptraining","text":"Cancel training a model. The model will stop once it finishes the current epoch. 1 stopTraining -n 'model name' Keyword Arguments: -n, --name ( str ) -- Name of model to stop","title":"stopTraining"},{"location":"commands/model/#predict","text":"Make predictions with a model. 1 predict -n 'model name' -i 'name of input data' -s '\\some\\path.txt' Keyword Arguments: -n, --name ( str ) -- Name of model -i, --input_data ( str ) -- Name of input data -s, --save_path ( str ) -- Path to save result (Optional)","title":"predict"},{"location":"commands/model/#freezegraph","text":"Freeze Tensorflow graph and latest checkpoint to 'resource\\model_name\\frozen_model.pb'. 1 freezeGraph -n 'model name' Keyword Arguments: -n, --name ( str ) -- Name of model","title":"freezeGraph"},{"location":"commands/model/#optimize","text":"Optimize a frozen model (see FreezeGraph) for inference. 1 optimize -n 'model name' Keyword Arguments: -n, --name ( str ) -- Name of model","title":"optimize"},{"location":"commands/overview/","text":"Commands Overview Commands are used to interact with the console as well as through the network socket. A command has two parts: the command and the arguments. In the console, a command could look something like this: 1 createModel --name 'myModel' --type 'SpeakerVerification' The equivalent of this in the network server would be: 1 2 3 4 5 6 7 { \"command\" : \"createModel\" , \"arguments\" : { \"name\" : \"myModel\" , \"type\" : \"SpeakerVerification\" } } The various commands and their arguments can be found in this section. Network-socket-related commands can be found under the Network section .","title":"Overview"},{"location":"commands/overview/#commands-overview","text":"Commands are used to interact with the console as well as through the network socket. A command has two parts: the command and the arguments. In the console, a command could look something like this: 1 createModel --name 'myModel' --type 'SpeakerVerification' The equivalent of this in the network server would be: 1 2 3 4 5 6 7 { \"command\" : \"createModel\" , \"arguments\" : { \"name\" : \"myModel\" , \"type\" : \"SpeakerVerification\" } } The various commands and their arguments can be found in this section. Network-socket-related commands can be found under the Network section .","title":"Commands Overview"},{"location":"commands/server/","text":"Server See Network for details. startServer Start a socket server and listen for clients. The server runs on a separate thread so the console will still function. 1 startServer -p 23333 [-l True] [-pwd 'p@ssword'] [-c 10] Keyword Arguments: -p, --port ( int ) -- Port to listen on -l, --local ( bool ) -- If the server is running locally (server will listen on 127.0.0.1 if this is true or not set) (Optional) -pwd, --password ( str ) -- Password of server (Optional) -c, --max_clients ( int ) -- Maximum number of clients (Optional) stopServer Stop current socket server and close all connections. 1 stopServer No argument required.","title":"Server"},{"location":"commands/server/#server","text":"See Network for details.","title":"Server"},{"location":"commands/server/#startserver","text":"Start a socket server and listen for clients. The server runs on a separate thread so the console will still function. 1 startServer -p 23333 [-l True] [-pwd 'p@ssword'] [-c 10] Keyword Arguments: -p, --port ( int ) -- Port to listen on -l, --local ( bool ) -- If the server is running locally (server will listen on 127.0.0.1 if this is true or not set) (Optional) -pwd, --password ( str ) -- Password of server (Optional) -c, --max_clients ( int ) -- Maximum number of clients (Optional)","title":"startServer"},{"location":"commands/server/#stopserver","text":"Stop current socket server and close all connections. 1 stopServer No argument required.","title":"stopServer"},{"location":"commands/waifu/","text":"Waifu getWaifu Get a list of existing waifu. 1 getWaifu No argument required. createWaifu Create a waifu. 1 createWaifu -n 'waifu name' -c 'name of model' -e 'name of embedding' Keyword Arguments: -n, --name ( str ) -- Name of waifu -c, --combined_chatbot_model ( str ) -- Name or directory of combined chatbot model to use -e, --embedding ( str ) -- Name of word embedding to use deleteWaifu Delete a waifu. 1 deleteWaifu -n 'waifu name' Keyword Arguments: -n, --name ( str ) -- Name of waifu to delete saveWaifu Save a waifu. 1 saveWaifu -n 'waifu name' Keyword Arguments: -n, --name ( str ) -- Name of waifu to save loadWaifu Load a waifu. 1 loadWaifu -n 'waifu name' Keyword Arguments: -n, --name ( str ) -- Name of waifu to load getWaifuDetail Get the detail information of a waifu. 1 getWaifuDetail -n 'waifu name' Keyword Arguments: -n, --name ( str ) -- Name of waifu waifuPredict Make prediction using waifu. 1 getWaifuDetail -n 'waifu name' Keyword Arguments: -n, --name ( str ) -- Name of waifu","title":"Waifu"},{"location":"commands/waifu/#waifu","text":"","title":"Waifu"},{"location":"commands/waifu/#getwaifu","text":"Get a list of existing waifu. 1 getWaifu No argument required.","title":"getWaifu"},{"location":"commands/waifu/#createwaifu","text":"Create a waifu. 1 createWaifu -n 'waifu name' -c 'name of model' -e 'name of embedding' Keyword Arguments: -n, --name ( str ) -- Name of waifu -c, --combined_chatbot_model ( str ) -- Name or directory of combined chatbot model to use -e, --embedding ( str ) -- Name of word embedding to use","title":"createWaifu"},{"location":"commands/waifu/#deletewaifu","text":"Delete a waifu. 1 deleteWaifu -n 'waifu name' Keyword Arguments: -n, --name ( str ) -- Name of waifu to delete","title":"deleteWaifu"},{"location":"commands/waifu/#savewaifu","text":"Save a waifu. 1 saveWaifu -n 'waifu name' Keyword Arguments: -n, --name ( str ) -- Name of waifu to save","title":"saveWaifu"},{"location":"commands/waifu/#loadwaifu","text":"Load a waifu. 1 loadWaifu -n 'waifu name' Keyword Arguments: -n, --name ( str ) -- Name of waifu to load","title":"loadWaifu"},{"location":"commands/waifu/#getwaifudetail","text":"Get the detail information of a waifu. 1 getWaifuDetail -n 'waifu name' Keyword Arguments: -n, --name ( str ) -- Name of waifu","title":"getWaifuDetail"},{"location":"commands/waifu/#waifupredict","text":"Make prediction using waifu. 1 getWaifuDetail -n 'waifu name' Keyword Arguments: -n, --name ( str ) -- Name of waifu","title":"waifuPredict"},{"location":"file structure/overview/","text":"File Structure Overview Animius uses various files, ranging from configs to Tensorflow model checkpoints. This overview will briefly explain how and where each of the objects is stored by default when using the console (this does not apply when using Animius as a python library or when directories are provided). It should also be noted that all config files created by Animius are in JSON. When you start Animius for the first time, the console will prompt you to choose a directory as the storage space for resources. This directory will contain all the files with the exception of \\user-config.json being at the root directory. config.json It should be noted that there is a clear distinction between \\config.json and \\user-config.json . \\config.json serves as a template for \\user-config.json , which should be created either manually or automatically at first launch. This way, when the user pulls updates from git, the configs will not be overwritten. Waifus (or Waifu-tachi) A Waifu, as the name suggests, is a set of models that are linked together to create an artificial intelligence agent \u2014 a Waifu. While waifus are stored individually as JSON files in the waifus folder, the \\waifus.json file contains information on all waifus for console usage. Models Unlike the Waifus, each model gets its own folder under the \\models\\ . A single file, \\models\\models.json stores information of all of the models. This also allows for models being stored outside of \\Models\\ (although this is strongly discouraged). For the sake of an example, we will have a single model named myModel . \\models\\myModel\\ will include a file \\Models\\myModel\\myModel.json containing its config. Model checkpoints and graphs will be stored in the same folder as myModel.json by default, while Tensorboard files will be stored in a folder defined by the user in model config. Model Configs Model configs, located under \\model_configs\\ have very similar structures as waifus: individual user-named JSON configs and a main model_configs.json . Each model config is an individual JSON file that is very similar to the config file of models, with the few exceptions of model-specific values such as names and epochs. Data It is often encouraged to store data in their raw forms, such as audio or words, so they can always be regenerated after changes in model structure. Nevertheless, it may be more convenient to store parsed data as numpy arrays. The saved files will be found in the \\Data\\ folder within their individual folders indicated in \\data\\data.json . Each folder will contain a JSON config and a .npz file generated by numpy. When storing data, there are also the options of saving separate copies of the model config and word embedding. This is to prevent changes that may be incompatible with the parsed data, such as sequence lengths and token indexes. These individual copies will be stored in folders within the directory of the JSON config and the .npz file. Word Embeddings Embeddings are stored under the \\embeddings\\ folder with a \\embeddings\\embeddings.json config. Each embedding has an individual folder containing a .npy numpy ndarrary file and two .pkl pickle files. No individual JSON file is stored for embeddings. File tree example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Resources \u251c\u2500\u2500\u2500 waifus \u2502 \u251c\u2500\u2500\u2500 waifus.json \u2502 \u2514\u2500\u2500\u2500 yukino_waifu_config.json \u251c\u2500\u2500\u2500 models \u2502 \u251c\u2500\u2500\u2500 models.json \u2502 \u2514\u2500\u2500\u2500 myModel \u2502 \u251c\u2500\u2500\u2500 checkpoint \u2502 \u251c\u2500\u2500\u2500 myModel.json \u2502 \u251c\u2500\u2500\u2500 myModel_graph.pb \u2502 \u251c\u2500\u2500\u2500 myModel-0.data-00000 \u2502 \u2514\u2500\u2500\u2500 myModel-0.meta \u251c\u2500\u2500\u2500 model_configs \u2502 \u251c\u2500\u2500\u2500 model_configs.json \u2502 \u2514\u2500\u2500\u2500 myModelConfig.json \u251c\u2500\u2500\u2500 data \u2502 \u251c\u2500\u2500\u2500 data.json \u2502 \u2514\u2500\u2500\u2500 myData \u2502 \u251c\u2500\u2500\u2500 myData.json \u2502 \u2514\u2500\u2500\u2500 myData_np_arrays.npz \u2514\u2500\u2500\u2500 embeddings \u251c\u2500\u2500\u2500 embeddings.json \u2514\u2500\u2500\u2500 myEmbedding \u251c\u2500\u2500\u2500 myEmbedding.npy \u251c\u2500\u2500\u2500 myEmbedding_words.pkl_ \u2514\u2500\u2500\u2500 myEmbedding_words_to_index.pkl","title":"Overview"},{"location":"file structure/overview/#file-structure-overview","text":"Animius uses various files, ranging from configs to Tensorflow model checkpoints. This overview will briefly explain how and where each of the objects is stored by default when using the console (this does not apply when using Animius as a python library or when directories are provided). It should also be noted that all config files created by Animius are in JSON. When you start Animius for the first time, the console will prompt you to choose a directory as the storage space for resources. This directory will contain all the files with the exception of \\user-config.json being at the root directory.","title":"File Structure Overview"},{"location":"file structure/overview/#configjson","text":"It should be noted that there is a clear distinction between \\config.json and \\user-config.json . \\config.json serves as a template for \\user-config.json , which should be created either manually or automatically at first launch. This way, when the user pulls updates from git, the configs will not be overwritten.","title":"config.json"},{"location":"file structure/overview/#waifus-or-waifu-tachi","text":"A Waifu, as the name suggests, is a set of models that are linked together to create an artificial intelligence agent \u2014 a Waifu. While waifus are stored individually as JSON files in the waifus folder, the \\waifus.json file contains information on all waifus for console usage.","title":"Waifus (or Waifu-tachi)"},{"location":"file structure/overview/#models","text":"Unlike the Waifus, each model gets its own folder under the \\models\\ . A single file, \\models\\models.json stores information of all of the models. This also allows for models being stored outside of \\Models\\ (although this is strongly discouraged). For the sake of an example, we will have a single model named myModel . \\models\\myModel\\ will include a file \\Models\\myModel\\myModel.json containing its config. Model checkpoints and graphs will be stored in the same folder as myModel.json by default, while Tensorboard files will be stored in a folder defined by the user in model config.","title":"Models"},{"location":"file structure/overview/#model-configs","text":"Model configs, located under \\model_configs\\ have very similar structures as waifus: individual user-named JSON configs and a main model_configs.json . Each model config is an individual JSON file that is very similar to the config file of models, with the few exceptions of model-specific values such as names and epochs.","title":"Model Configs"},{"location":"file structure/overview/#data","text":"It is often encouraged to store data in their raw forms, such as audio or words, so they can always be regenerated after changes in model structure. Nevertheless, it may be more convenient to store parsed data as numpy arrays. The saved files will be found in the \\Data\\ folder within their individual folders indicated in \\data\\data.json . Each folder will contain a JSON config and a .npz file generated by numpy. When storing data, there are also the options of saving separate copies of the model config and word embedding. This is to prevent changes that may be incompatible with the parsed data, such as sequence lengths and token indexes. These individual copies will be stored in folders within the directory of the JSON config and the .npz file.","title":"Data"},{"location":"file structure/overview/#word-embeddings","text":"Embeddings are stored under the \\embeddings\\ folder with a \\embeddings\\embeddings.json config. Each embedding has an individual folder containing a .npy numpy ndarrary file and two .pkl pickle files. No individual JSON file is stored for embeddings.","title":"Word Embeddings"},{"location":"file structure/overview/#file-tree-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Resources \u251c\u2500\u2500\u2500 waifus \u2502 \u251c\u2500\u2500\u2500 waifus.json \u2502 \u2514\u2500\u2500\u2500 yukino_waifu_config.json \u251c\u2500\u2500\u2500 models \u2502 \u251c\u2500\u2500\u2500 models.json \u2502 \u2514\u2500\u2500\u2500 myModel \u2502 \u251c\u2500\u2500\u2500 checkpoint \u2502 \u251c\u2500\u2500\u2500 myModel.json \u2502 \u251c\u2500\u2500\u2500 myModel_graph.pb \u2502 \u251c\u2500\u2500\u2500 myModel-0.data-00000 \u2502 \u2514\u2500\u2500\u2500 myModel-0.meta \u251c\u2500\u2500\u2500 model_configs \u2502 \u251c\u2500\u2500\u2500 model_configs.json \u2502 \u2514\u2500\u2500\u2500 myModelConfig.json \u251c\u2500\u2500\u2500 data \u2502 \u251c\u2500\u2500\u2500 data.json \u2502 \u2514\u2500\u2500\u2500 myData \u2502 \u251c\u2500\u2500\u2500 myData.json \u2502 \u2514\u2500\u2500\u2500 myData_np_arrays.npz \u2514\u2500\u2500\u2500 embeddings \u251c\u2500\u2500\u2500 embeddings.json \u2514\u2500\u2500\u2500 myEmbedding \u251c\u2500\u2500\u2500 myEmbedding.npy \u251c\u2500\u2500\u2500 myEmbedding_words.pkl_ \u2514\u2500\u2500\u2500 myEmbedding_words_to_index.pkl","title":"File tree example"},{"location":"network/authentication/","text":"Network Authentication Since the server and client are able to communicate across different networks, authentication is required to prevent abusing hardware or stealing model information. Password When starting a server, the argument -p or --password is avaliable to set up passwords. Connections without the correct password will be closed. The password is not saved by the console, so it is expected for the user to pass in the argument every time. This also allows the password to be changed between sessions. If no argument is passed, the server will accept all connections. Client If the server has a password, the client must send the password string encrypted with AES ( encryption ) upon connection. No JSON format is required. If the password is incorrect, the connection will be closed. Otherwise, the connection will remain open and a 'success' response will be sent. If the server does not have a password, then the client is not expected to send anything.","title":"Authentication"},{"location":"network/authentication/#network-authentication","text":"Since the server and client are able to communicate across different networks, authentication is required to prevent abusing hardware or stealing model information.","title":"Network Authentication"},{"location":"network/authentication/#password","text":"When starting a server, the argument -p or --password is avaliable to set up passwords. Connections without the correct password will be closed. The password is not saved by the console, so it is expected for the user to pass in the argument every time. This also allows the password to be changed between sessions. If no argument is passed, the server will accept all connections.","title":"Password"},{"location":"network/authentication/#client","text":"If the server has a password, the client must send the password string encrypted with AES ( encryption ) upon connection. No JSON format is required. If the password is incorrect, the connection will be closed. Otherwise, the connection will remain open and a 'success' response will be sent. If the server does not have a password, then the client is not expected to send anything.","title":"Client"},{"location":"network/encryption/","text":"Network Encryption IMPORTANT | Animius no longer uses ANY encrytion. It sends plain strings/bytes instead. The following is outdated In short, Animius uses AES-CBC + base64 encryption. Initial Connection Upon connection, the server will send a unencrypted response containing the key and iv for AES-CBC. It should look something similar to: 1 2 3 4 5 6 7 8 9 { \"id\" : \"01:01\" , \"status\" : 0 , \"message\" : \"\" , \"data\" : { \"key\" : \"base64 encoded string\" , \"iv\" : \"base64 encoded string\" } } The client should decode the base64 strings to obtain the original bytes. Client sending When sending a JSON-formatted request (see the overview page for details) to the server, it must be converted bytes through UTF-8. Then, encrypt the message with AES-CBC with the recevied keys and IVs. Convert the encrypted bytes to a base64 string. Finally, encode the string into bytes with UTF-8 and send it. Client receiving Upon receiving the bytes, the client should decode it with UTF-8, obtaining a base64-encoded string. Then, decode the string with base64. Decrypt the decoded bytes using AES-CBC with the key and iv provided upon connection. Decode the bytes with UTF-8. The result should be a JSON string.","title":"Encryption"},{"location":"network/encryption/#network-encryption","text":"IMPORTANT | Animius no longer uses ANY encrytion. It sends plain strings/bytes instead. The following is outdated In short, Animius uses AES-CBC + base64 encryption.","title":"Network Encryption"},{"location":"network/encryption/#initial-connection","text":"Upon connection, the server will send a unencrypted response containing the key and iv for AES-CBC. It should look something similar to: 1 2 3 4 5 6 7 8 9 { \"id\" : \"01:01\" , \"status\" : 0 , \"message\" : \"\" , \"data\" : { \"key\" : \"base64 encoded string\" , \"iv\" : \"base64 encoded string\" } } The client should decode the base64 strings to obtain the original bytes.","title":"Initial Connection"},{"location":"network/encryption/#client-sending","text":"When sending a JSON-formatted request (see the overview page for details) to the server, it must be converted bytes through UTF-8. Then, encrypt the message with AES-CBC with the recevied keys and IVs. Convert the encrypted bytes to a base64 string. Finally, encode the string into bytes with UTF-8 and send it.","title":"Client sending"},{"location":"network/encryption/#client-receiving","text":"Upon receiving the bytes, the client should decode it with UTF-8, obtaining a base64-encoded string. Then, decode the string with base64. Decrypt the decoded bytes using AES-CBC with the key and iv provided upon connection. Decode the bytes with UTF-8. The result should be a JSON string.","title":"Client receiving"},{"location":"network/overview/","text":"Network Overview In addition to using the python console, Animius can also be accessed with a network TCP socket. This allows for user-friendly and extensive clients written in other languages. Server The server has the same requirements as using the python console, with the addition of networking. Client The client has no requirements other than networking. Python is not needed. To communicate with the server, simply use TCP messages. Although it is recommended for security, the client and the server are not required to be on the same network. See (gundamMC/Waifu-GUI) for a C# WPF example. Commands The server takes in JSON messages with the following format: 1 2 3 4 5 6 7 8 { \"command\" : \"foo\" , \"id\" : \"01:01\" , \"arguments\" : { \"boo\" : 2 , \"bar\" : \"MAX\" } } command takes in a string that specifies a function defined by the server while the dictionary arguments define the keyword arguments. For instance, the above code represents foo --boo=2 --bar='MAX' . id is simply a string identifier for the client. Responses The server responds in the following format: 1 2 3 4 5 6 7 8 9 { \"id\" : \"01:01\" , \"status\" : 0 , \"message\" : \"success\" , \"data\" : { \"foo\" : 2 , \"boo\" : \"bar\" } } id is the identifier that the client sends. The server simply returns the same id. status is a code that represents the following values 0 -> success 1 -> failure 2 -> argument error 3- > error (An argument error occurs when an argument is missing or has the wrong type, in contrary to an error) message is simply a message that provides additional information on the status. In failure or an error, it would provide the cause of such failure or error. data is a dictionary that contains the return values of the command. If the user queries for information on a model, data would include the information of the model. Note that data is subject to change for each command, while some commands may not even return anything in data (an empty dictionary will be used in that case to ensure that all responses contain a data ).","title":"Overview"},{"location":"network/overview/#network-overview","text":"In addition to using the python console, Animius can also be accessed with a network TCP socket. This allows for user-friendly and extensive clients written in other languages.","title":"Network Overview"},{"location":"network/overview/#server","text":"The server has the same requirements as using the python console, with the addition of networking.","title":"Server"},{"location":"network/overview/#client","text":"The client has no requirements other than networking. Python is not needed. To communicate with the server, simply use TCP messages. Although it is recommended for security, the client and the server are not required to be on the same network. See (gundamMC/Waifu-GUI) for a C# WPF example.","title":"Client"},{"location":"network/overview/#commands","text":"The server takes in JSON messages with the following format: 1 2 3 4 5 6 7 8 { \"command\" : \"foo\" , \"id\" : \"01:01\" , \"arguments\" : { \"boo\" : 2 , \"bar\" : \"MAX\" } } command takes in a string that specifies a function defined by the server while the dictionary arguments define the keyword arguments. For instance, the above code represents foo --boo=2 --bar='MAX' . id is simply a string identifier for the client.","title":"Commands"},{"location":"network/overview/#responses","text":"The server responds in the following format: 1 2 3 4 5 6 7 8 9 { \"id\" : \"01:01\" , \"status\" : 0 , \"message\" : \"success\" , \"data\" : { \"foo\" : 2 , \"boo\" : \"bar\" } } id is the identifier that the client sends. The server simply returns the same id. status is a code that represents the following values 0 -> success 1 -> failure 2 -> argument error 3- > error (An argument error occurs when an argument is missing or has the wrong type, in contrary to an error) message is simply a message that provides additional information on the status. In failure or an error, it would provide the cause of such failure or error. data is a dictionary that contains the return values of the command. If the user queries for information on a model, data would include the information of the model. Note that data is subject to change for each command, while some commands may not even return anything in data (an empty dictionary will be used in that case to ensure that all responses contain a data ).","title":"Responses"}]}