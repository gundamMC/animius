{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Animius Docs WIP","title":"Home"},{"location":"#welcome-to-animius-docs","text":"WIP","title":"Welcome to Animius Docs"},{"location":"about/","text":"De nec cadunt est undique illa ille Pecoris aequore Lorem markdownum laevum hoste, Arcton convocat sanesque silva agro, Pandione ego bellica ? Mihi esse obortis, in pondus sancta duratur uvae dum! Captus casside. Audete illi in rebus in adulantum tuli, in subde interserit, per. Quamvis et ferocis nostri lingua ! Cacumine tum paranti, praefractam haec spargit. Templi modo latentes duxerat et arma. Pone bene pectore forma Tiberinus animalia quamvis? Pectus sub iacit tuebere ad altior. 1 2 3 syncDrive.win_intranet = dns; var tcpSiteWrap = 5; smartTerminal.jqueryCpm += wordart; At aurea molibus Florem in est? Aera suo, sunto amas sanguine altaribus venter mea, nobis utque eras ab. Lucis est pectus catenas nequeunt unguibus pecudes lucis et patientem quae adiutis lacrimabile potest nubigenasque mente. Viri tuum nova positoque, illo sic, iusserat mihi caelo vivunt vel sepulti omnis locum volucrumque adde; fixa. Alte demittere ad inter poenam orbator. Discedite moenia sustinet officio mihi annis super, et honor et longum dempto postquam tot dolens! Tibi auras Tauros et inmensae tuo pumice moventur illo adflatuque signum ; ait media erat amans, auras? Gemitu Teucri Stabiasque dextris nate verba victor. Nate quam vellem, Turnus it mendacem datur Arethusa, dixerat referemus aevumque. 1 2 3 var source = disk(barcraftGrep, sectorWired, 80); web_hfs_bar += raw; hover_megabit(copyright_pcmcia, smishing, modem_hard_user + dvd / petabyte); Tollere parta. Dianam optima cum vasto sanguine Persei hospitio consorte animam. Animum pugnae unus pavidamque tellure, vetitorum crearit: quoque rex pater adiectoque quae verba coloribus milibus procul ; nimiumque. Mentem ut utque finibus Aesaris fiducia perfundit terrent est exiguam regna exsistunt, officium , Iunone. Qua cumque notas tuae damnantem ultima spissus quid hos sinit: inpensior.","title":"About"},{"location":"about/#de-nec-cadunt-est-undique-illa-ille","text":"","title":"De nec cadunt est undique illa ille"},{"location":"about/#pecoris-aequore","text":"Lorem markdownum laevum hoste, Arcton convocat sanesque silva agro, Pandione ego bellica ? Mihi esse obortis, in pondus sancta duratur uvae dum! Captus casside. Audete illi in rebus in adulantum tuli, in subde interserit, per. Quamvis et ferocis nostri lingua ! Cacumine tum paranti, praefractam haec spargit. Templi modo latentes duxerat et arma. Pone bene pectore forma Tiberinus animalia quamvis? Pectus sub iacit tuebere ad altior. 1 2 3 syncDrive.win_intranet = dns; var tcpSiteWrap = 5; smartTerminal.jqueryCpm += wordart;","title":"Pecoris aequore"},{"location":"about/#at-aurea-molibus","text":"Florem in est? Aera suo, sunto amas sanguine altaribus venter mea, nobis utque eras ab. Lucis est pectus catenas nequeunt unguibus pecudes lucis et patientem quae adiutis lacrimabile potest nubigenasque mente. Viri tuum nova positoque, illo sic, iusserat mihi caelo vivunt vel sepulti omnis locum volucrumque adde; fixa. Alte demittere ad inter poenam orbator. Discedite moenia sustinet officio mihi annis super, et honor et longum dempto postquam tot dolens!","title":"At aurea molibus"},{"location":"about/#tibi-auras","text":"Tauros et inmensae tuo pumice moventur illo adflatuque signum ; ait media erat amans, auras? Gemitu Teucri Stabiasque dextris nate verba victor. Nate quam vellem, Turnus it mendacem datur Arethusa, dixerat referemus aevumque. 1 2 3 var source = disk(barcraftGrep, sectorWired, 80); web_hfs_bar += raw; hover_megabit(copyright_pcmcia, smishing, modem_hard_user + dvd / petabyte); Tollere parta. Dianam optima cum vasto sanguine Persei hospitio consorte animam. Animum pugnae unus pavidamque tellure, vetitorum crearit: quoque rex pater adiectoque quae verba coloribus milibus procul ; nimiumque. Mentem ut utque finibus Aesaris fiducia perfundit terrent est exiguam regna exsistunt, officium , Iunone. Qua cumque notas tuae damnantem ultima spissus quid hos sinit: inpensior.","title":"Tibi auras"},{"location":"commands/overview/","text":"Commands Overview Commands are used to interact with the console as well as through the network socket. A command has two parts: the command and the arguments. In the console, a command could look something like this: 1 createModel --name='myModel' --model='SpeakerVerification' The command must start with the command, indi The equivalent of this in the network socket would be: 1 2 3 4 5 6 7 { \"command\" : \"createModel\" , \"arguments\" : { \"name\" : \"myModel\" , \"model\" : \"SpeakerVerification\" } } The various commands and their arguments can be found in this section. Network-socket-related commands can be found under the Network section . Model Create Model Create a model. 1 createModel --name='myModel' --type='ChatbotModel' Keyword Arguments: name ( str ) -- Name of model type ( str ) -- Type of model Delete Model Delete a model. 1 deleteModel --name='myModel' Keyword Arguments: name ( str ) -- Name of model to delete Save Model Save a model. 1 saveModel --name='myModel' Keyword Arguments: name ( str ) -- Name of model to save Load Model Load a model. 1 loadModel --name='myModel' --data='myData' Keyword Arguments: name ( str ) -- Name of model to load data ( str ) -- Name of data to load Set Data Set model data. 1 setData --name='myModel' --data='myData' Keyword Arguments: name ( str ) -- Name of model to set data ( str ) -- Name of data to set Train Train a model. 1 train --name='myModel' --epoch=20 Keyword Arguments: name ( str ) -- Name of model to set epoch ( int ) -- Number of epoch Predict Predict a model. 1 predict --name='myModel' --input_data='' --save_path='' Keyword Arguments: name ( str ) -- Name of model to predict input_data ( str ) -- Name of input data save_path ( str ) -- Path to save result (Optional) ModelConfig Create Model Config Create a model config with the provided values. 1 createModelConfig --name='myModelConfig' --cls='' Keyword Arguements: name ( str ) -- Name of model config cls ( str ) -- Name of the model class config ( dict ) -- Dictionary of config values (Optional) hyperparameters ( dict ) -- Dictionary of hyperparameters values (Optional) model_structure ( model_structure ) -- Dictionary of model_structure values (Optional) Edit Model Config Update a model config with the provided values. 1 createModelConfig --name='myModelConfig' Keyword Arguments: name ( str ) -- Name of model config to edit config ( dict ) -- Dictionary containing the updated config values hyperparameters ( dict ) -- Dictionary containing the updated hyperparameters values model_structure ( model_structure ) -- Dictionary containing the updated model_structure values Delete Model Config Delete a model config. 1 deleteModelConfig --name='myModelConfig' Keyword Argument: name ( str ) -- Name of model config to delete Save Model Config Save a model config. 1 saveModelConfig --name='myModelConfig' Keyword Argument: name ( str ) -- Name of model config to save Load Model Config Load a model config. 1 loadModelConfig --name='myModelConfig' Keyword Argument: name ( str ) -- Name of model config to load Data Create Data Create a data with empty values. 1 createData --name='myData' --type='ChatbotData' --model_config='myModelConfig' Keyword Arguments: name ( str ) -- Name of data type ( str ) -- Type of data (based on the model) model_config ( str ) -- Name of model config Add Embedding To Data Add twitter dataset to a chatbot data. 1 dataAddEmbedding --name='myData' --name_embedding='myEmbedding' Keyword Arguments: name ( str ) -- Name of data to add on name_embedding ( str ) -- Name of the embedding to add to data Reset Data Reset a data, clearing all stored data values. 1 dataReset --name='myData' Keyword Arguments: name ( str ) -- Name of data to reset Delete Data Delete a data. 1 deleteData --name='myData' Keyword Arguments: name ( str ) -- Name of data to delete Save Data Save a data. 1 saveData --name='myData' Keyword Arguments: name ( str ) -- Name of data to save Load Data Load a data. 1 loadData --name='myData' Keyword Arguments: name ( str ) -- Name of data to load Chatbot Data Add Twitter To Chatbot Data Add twitter dataset to a chatbot data. 1 chatbotDataAddTwitter --name='myData' --path='' Keyword Arguments: name ( str ) -- Name of data to add on path ( str ) -- Path to twitter file Add Cornell To Chatbot Data Add Cornell dataset to a chatbot data. 1 chatbotDataAddTwitter --name='myData' --movie_conversations_path='' --movie_lines_path='' Keyword Arguments: name ( str ) -- Name of data to add on movie_conversations_path ( str ) -- Path to movie_conversations.txt in the Cornell dataset movie_lines_path ( str ) -- Path to movie_lines.txt in the Cornell dataset Add Parse Sentences To Chatbot Data Parse raw sentences and add them to a chatbot data. 1 chatbotDataAddParseSentences --name='myData' --x='' --y='' Keyword Arguments: name ( str ) -- Name of data to add on x ( list<str> ) -- List of strings, each representing a sentence input y ( list<str> ) -- List of strings, each representing a sentence output Add Parse File To Chatbot Data Parse raw sentences from text files and add them to a chatbot data. 1 chatbotDataAddParseFile --name='myData' --x_path='' --y_path='' Keyword Arguments: name ( str ) -- Name of data to add on x_path ( str ) -- Path to a UTF-8 file containing a raw sentence input on each line y_path ( str ) -- Path to a UTF-8 file containing a raw sentence output on each line Add Parse Input To Chatbot Data Parse a raw sentence as input and add it to a chatbot data. 1 chatbotDataAddParseInput --name='myData' --x='hey how are you' Keyword Arguments: name ( str ) -- Name of data to add on x ( str ) -- Raw sentence input Set Parse Input To Chatbot Data Parse a raw sentence as input and set it as a chatbot data. 1 chatbotDataSetParseInput --name='myData' --x='hey how are you' Keyword Arguments: name ( str ) -- Name of data to set x ( str ) -- Raw sentence input IntentNER Data Add Parse Input To IntentNER Data Parse a raw sentence as input and add it to an intent NER data. 1 intentNERDataAddParseInput --name='myData' --x='hey how are you' Keyword Arguments: name ( str ) -- Name of data to add on x ( str ) -- Raw sentence input Set Parse Input To IntentNER Data Parse a raw sentence as input and set it as an intent NER data. 1 intentNERDataSetParseInput --name='myData' --x='hey how are you' Keyword Arguments: name ( str ) -- Name of data to set x ( str ) -- Raw sentence input Add Parse Data Folder To IntentNER Data Parse files from a folder and add them to a chatbot data. 1 intentNERDataAddParseDatafolder --name='myData' --folder_directory='' Keyword Arguments: name ( str ) -- Name of data to add on folder_directory ( str ) -- Path to a folder contains input files SpeakerVerification Data Add Data Paths To SpeakerVerification Data Parse and add raw audio files to a speaker verification data. 1 speakerVerificationDataAddDataPaths --name='myData' --paths='' --y=True Keyword Arguments: name ( str ) -- Name of data to add on paths ( list<str> ) -- List of string paths to raw audio files y ( bool ) -- The label (True for is speaker and vice versa) of the audio files. Optional. Include for training, leave out for prediction. (Optional) Add Data File To SpeakerVerification Data Read paths to raw audio files and add them to a speaker verification data. 1 speakerVerificationDataAddDataFile --name='myData' --paths='' --y=True Keyword Arguments: name ( str ) -- Name of data to add on path ( str ) -- Path to file containing a path of a raw audio file on each line y ( bool ) -- The label (True for is speaker and vice versa) of the audio files. Optional. Include for training, leave out for prediction.(Optional) Embedding Create Embedding Create a word embedding. 1 createEmbedding --name='myEmbedding' --path='' Keyword Arguments: name ( str ) -- Name of embedding path ( str ) -- Path to embedding file vocab_size ( int ) -- Maximum number of tokens to read from embedding file (Optional) Delete Embedding Delete a word embedding. 1 deleteEmbedding --name='myEmbedding' Keyword Arguments: name ( str ) -- Name of embedding to delete Save Embedding Save an embedding. 1 saveEmbedding --name='myEmbedding' Keyword Arguments: name ( str ) -- Name of embedding to save Load Embedding Load an embedding. 1 loadEmbedding --name='myEmbedding' Keyword Arguments: name ( str ) -- Name of embedding to load","title":"Overview"},{"location":"commands/overview/#commands-overview","text":"Commands are used to interact with the console as well as through the network socket. A command has two parts: the command and the arguments. In the console, a command could look something like this: 1 createModel --name='myModel' --model='SpeakerVerification' The command must start with the command, indi The equivalent of this in the network socket would be: 1 2 3 4 5 6 7 { \"command\" : \"createModel\" , \"arguments\" : { \"name\" : \"myModel\" , \"model\" : \"SpeakerVerification\" } } The various commands and their arguments can be found in this section. Network-socket-related commands can be found under the Network section .","title":"Commands Overview"},{"location":"commands/overview/#model","text":"","title":"Model"},{"location":"commands/overview/#create-model","text":"Create a model. 1 createModel --name='myModel' --type='ChatbotModel' Keyword Arguments: name ( str ) -- Name of model type ( str ) -- Type of model","title":"Create Model"},{"location":"commands/overview/#delete-model","text":"Delete a model. 1 deleteModel --name='myModel' Keyword Arguments: name ( str ) -- Name of model to delete","title":"Delete Model"},{"location":"commands/overview/#save-model","text":"Save a model. 1 saveModel --name='myModel' Keyword Arguments: name ( str ) -- Name of model to save","title":"Save Model"},{"location":"commands/overview/#load-model","text":"Load a model. 1 loadModel --name='myModel' --data='myData' Keyword Arguments: name ( str ) -- Name of model to load data ( str ) -- Name of data to load","title":"Load Model"},{"location":"commands/overview/#set-data","text":"Set model data. 1 setData --name='myModel' --data='myData' Keyword Arguments: name ( str ) -- Name of model to set data ( str ) -- Name of data to set","title":"Set Data"},{"location":"commands/overview/#train","text":"Train a model. 1 train --name='myModel' --epoch=20 Keyword Arguments: name ( str ) -- Name of model to set epoch ( int ) -- Number of epoch","title":"Train"},{"location":"commands/overview/#predict","text":"Predict a model. 1 predict --name='myModel' --input_data='' --save_path='' Keyword Arguments: name ( str ) -- Name of model to predict input_data ( str ) -- Name of input data save_path ( str ) -- Path to save result (Optional)","title":"Predict"},{"location":"commands/overview/#modelconfig","text":"","title":"ModelConfig"},{"location":"commands/overview/#create-model-config","text":"Create a model config with the provided values. 1 createModelConfig --name='myModelConfig' --cls='' Keyword Arguements: name ( str ) -- Name of model config cls ( str ) -- Name of the model class config ( dict ) -- Dictionary of config values (Optional) hyperparameters ( dict ) -- Dictionary of hyperparameters values (Optional) model_structure ( model_structure ) -- Dictionary of model_structure values (Optional)","title":"Create Model Config"},{"location":"commands/overview/#edit-model-config","text":"Update a model config with the provided values. 1 createModelConfig --name='myModelConfig' Keyword Arguments: name ( str ) -- Name of model config to edit config ( dict ) -- Dictionary containing the updated config values hyperparameters ( dict ) -- Dictionary containing the updated hyperparameters values model_structure ( model_structure ) -- Dictionary containing the updated model_structure values","title":"Edit Model Config"},{"location":"commands/overview/#delete-model-config","text":"Delete a model config. 1 deleteModelConfig --name='myModelConfig' Keyword Argument: name ( str ) -- Name of model config to delete","title":"Delete Model Config"},{"location":"commands/overview/#save-model-config","text":"Save a model config. 1 saveModelConfig --name='myModelConfig' Keyword Argument: name ( str ) -- Name of model config to save","title":"Save Model Config"},{"location":"commands/overview/#load-model-config","text":"Load a model config. 1 loadModelConfig --name='myModelConfig' Keyword Argument: name ( str ) -- Name of model config to load","title":"Load Model Config"},{"location":"commands/overview/#data","text":"","title":"Data"},{"location":"commands/overview/#create-data","text":"Create a data with empty values. 1 createData --name='myData' --type='ChatbotData' --model_config='myModelConfig' Keyword Arguments: name ( str ) -- Name of data type ( str ) -- Type of data (based on the model) model_config ( str ) -- Name of model config","title":"Create Data"},{"location":"commands/overview/#add-embedding-to-data","text":"Add twitter dataset to a chatbot data. 1 dataAddEmbedding --name='myData' --name_embedding='myEmbedding' Keyword Arguments: name ( str ) -- Name of data to add on name_embedding ( str ) -- Name of the embedding to add to data","title":"Add Embedding To Data"},{"location":"commands/overview/#reset-data","text":"Reset a data, clearing all stored data values. 1 dataReset --name='myData' Keyword Arguments: name ( str ) -- Name of data to reset","title":"Reset Data"},{"location":"commands/overview/#delete-data","text":"Delete a data. 1 deleteData --name='myData' Keyword Arguments: name ( str ) -- Name of data to delete","title":"Delete Data"},{"location":"commands/overview/#save-data","text":"Save a data. 1 saveData --name='myData' Keyword Arguments: name ( str ) -- Name of data to save","title":"Save Data"},{"location":"commands/overview/#load-data","text":"Load a data. 1 loadData --name='myData' Keyword Arguments: name ( str ) -- Name of data to load","title":"Load Data"},{"location":"commands/overview/#chatbot-data","text":"","title":"Chatbot Data"},{"location":"commands/overview/#add-twitter-to-chatbot-data","text":"Add twitter dataset to a chatbot data. 1 chatbotDataAddTwitter --name='myData' --path='' Keyword Arguments: name ( str ) -- Name of data to add on path ( str ) -- Path to twitter file","title":"Add Twitter To Chatbot Data"},{"location":"commands/overview/#add-cornell-to-chatbot-data","text":"Add Cornell dataset to a chatbot data. 1 chatbotDataAddTwitter --name='myData' --movie_conversations_path='' --movie_lines_path='' Keyword Arguments: name ( str ) -- Name of data to add on movie_conversations_path ( str ) -- Path to movie_conversations.txt in the Cornell dataset movie_lines_path ( str ) -- Path to movie_lines.txt in the Cornell dataset","title":"Add Cornell To Chatbot Data"},{"location":"commands/overview/#add-parse-sentences-to-chatbot-data","text":"Parse raw sentences and add them to a chatbot data. 1 chatbotDataAddParseSentences --name='myData' --x='' --y='' Keyword Arguments: name ( str ) -- Name of data to add on x ( list<str> ) -- List of strings, each representing a sentence input y ( list<str> ) -- List of strings, each representing a sentence output","title":"Add Parse Sentences To Chatbot Data"},{"location":"commands/overview/#add-parse-file-to-chatbot-data","text":"Parse raw sentences from text files and add them to a chatbot data. 1 chatbotDataAddParseFile --name='myData' --x_path='' --y_path='' Keyword Arguments: name ( str ) -- Name of data to add on x_path ( str ) -- Path to a UTF-8 file containing a raw sentence input on each line y_path ( str ) -- Path to a UTF-8 file containing a raw sentence output on each line","title":"Add Parse File To Chatbot Data"},{"location":"commands/overview/#add-parse-input-to-chatbot-data","text":"Parse a raw sentence as input and add it to a chatbot data. 1 chatbotDataAddParseInput --name='myData' --x='hey how are you' Keyword Arguments: name ( str ) -- Name of data to add on x ( str ) -- Raw sentence input","title":"Add Parse Input To Chatbot Data"},{"location":"commands/overview/#set-parse-input-to-chatbot-data","text":"Parse a raw sentence as input and set it as a chatbot data. 1 chatbotDataSetParseInput --name='myData' --x='hey how are you' Keyword Arguments: name ( str ) -- Name of data to set x ( str ) -- Raw sentence input","title":"Set Parse Input To Chatbot Data"},{"location":"commands/overview/#intentner-data","text":"","title":"IntentNER Data"},{"location":"commands/overview/#add-parse-input-to-intentner-data","text":"Parse a raw sentence as input and add it to an intent NER data. 1 intentNERDataAddParseInput --name='myData' --x='hey how are you' Keyword Arguments: name ( str ) -- Name of data to add on x ( str ) -- Raw sentence input","title":"Add Parse Input To IntentNER Data"},{"location":"commands/overview/#set-parse-input-to-intentner-data","text":"Parse a raw sentence as input and set it as an intent NER data. 1 intentNERDataSetParseInput --name='myData' --x='hey how are you' Keyword Arguments: name ( str ) -- Name of data to set x ( str ) -- Raw sentence input","title":"Set Parse Input To IntentNER Data"},{"location":"commands/overview/#add-parse-data-folder-to-intentner-data","text":"Parse files from a folder and add them to a chatbot data. 1 intentNERDataAddParseDatafolder --name='myData' --folder_directory='' Keyword Arguments: name ( str ) -- Name of data to add on folder_directory ( str ) -- Path to a folder contains input files","title":"Add Parse Data Folder To IntentNER Data"},{"location":"commands/overview/#speakerverification-data","text":"","title":"SpeakerVerification Data"},{"location":"commands/overview/#add-data-paths-to-speakerverification-data","text":"Parse and add raw audio files to a speaker verification data. 1 speakerVerificationDataAddDataPaths --name='myData' --paths='' --y=True Keyword Arguments: name ( str ) -- Name of data to add on paths ( list<str> ) -- List of string paths to raw audio files y ( bool ) -- The label (True for is speaker and vice versa) of the audio files. Optional. Include for training, leave out for prediction. (Optional)","title":"Add Data Paths To SpeakerVerification Data"},{"location":"commands/overview/#add-data-file-to-speakerverification-data","text":"Read paths to raw audio files and add them to a speaker verification data. 1 speakerVerificationDataAddDataFile --name='myData' --paths='' --y=True Keyword Arguments: name ( str ) -- Name of data to add on path ( str ) -- Path to file containing a path of a raw audio file on each line y ( bool ) -- The label (True for is speaker and vice versa) of the audio files. Optional. Include for training, leave out for prediction.(Optional)","title":"Add Data File To SpeakerVerification Data"},{"location":"commands/overview/#embedding","text":"","title":"Embedding"},{"location":"commands/overview/#create-embedding","text":"Create a word embedding. 1 createEmbedding --name='myEmbedding' --path='' Keyword Arguments: name ( str ) -- Name of embedding path ( str ) -- Path to embedding file vocab_size ( int ) -- Maximum number of tokens to read from embedding file (Optional)","title":"Create Embedding"},{"location":"commands/overview/#delete-embedding","text":"Delete a word embedding. 1 deleteEmbedding --name='myEmbedding' Keyword Arguments: name ( str ) -- Name of embedding to delete","title":"Delete Embedding"},{"location":"commands/overview/#save-embedding","text":"Save an embedding. 1 saveEmbedding --name='myEmbedding' Keyword Arguments: name ( str ) -- Name of embedding to save","title":"Save Embedding"},{"location":"commands/overview/#load-embedding","text":"Load an embedding. 1 loadEmbedding --name='myEmbedding' Keyword Arguments: name ( str ) -- Name of embedding to load","title":"Load Embedding"},{"location":"file structure/overview/","text":"File Structure Overview Animius uses various files, ranging from configs to Tensorflow model checkpoints. This overview will briefly explain how and where each of the objects is stored by default when using the console (this does not apply when using Animius as a python library or when directories are provided). It should also be noted that all config files created by Animius are in JSON. When you start Animius for the first time, the console will prompt you to choose a directory as the storage space for resources. This directory will contain all the files with the exception of \\user-config.json being at the root directory. config.json It should be noted that there is a clear distinction between \\config.json and \\user-config.json . \\config.json serves as a template for \\user-config.json , which should be created either manually or automatically at first launch. This way, when the user pulls updates from git, the configs will not be overwritten. Waifus (or Waifu-tachi) A Waifu, as the name suggests, is a set of models that are linked together to create an artificial intelligence agent \u2014 a Waifu. While waifus are stored individually as JSON files in the waifus folder, the \\waifus.json file contains information on all waifus for console usage. Models Unlike the Waifus, each model gets its own folder under the \\models\\ . A single file, \\models\\models.json stores information of all of the models. This also allows for models being stored outside of \\Models\\ (although this is strongly discouraged). For the sake of an example, we will have a single model named myModel . \\models\\myModel\\ will include a file \\Models\\myModel\\myModel.json containing its config. Model checkpoints and graphs will be stored in the same folder as myModel.json by default, while Tensorboard files will be stored in a folder defined by the user in model config. Model Configs Model configs, located under \\model_configs\\ have very similar structures as waifus: individual user-named JSON configs and a main model_configs.json . Each model config is an individual JSON file that is very similar to the config file of models, with the few exceptions of model-specific values such as names and epochs. Data It is often encouraged to store data in their raw forms, such as audio or words, so they can always be regenerated after changes in model structure. Nevertheless, it may be more convenient to store parsed data as numpy arrays. The saved files will be found in the \\Data\\ folder within their individual folders indicated in \\data\\data.json . Each folder will contain a JSON config and a .npz file generated by numpy. When storing data, there are also the options of saving separate copies of the model config and word embedding. This is to prevent changes that may be incompatible with the parsed data, such as sequence lengths and token indexes. These individual copies will be stored in folders within the directory of the JSON config and the .npz file. Word Embeddings Embeddings are stored under the \\embeddings\\ folder with a \\embeddings\\embeddings.json config. Each embedding has an individual folder containing a .npy numpy ndarrary file and two .pkl pickle files. No individual JSON file is stored for embeddings. File tree example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Resources \u251c\u2500\u2500\u2500 waifus \u2502 \u251c\u2500\u2500\u2500 waifus.json \u2502 \u2514\u2500\u2500\u2500 yukino_waifu_config.json \u251c\u2500\u2500\u2500 models \u2502 \u251c\u2500\u2500\u2500 models.json \u2502 \u2514\u2500\u2500\u2500 myModel \u2502 \u251c\u2500\u2500\u2500 checkpoint \u2502 \u251c\u2500\u2500\u2500 myModel.json \u2502 \u251c\u2500\u2500\u2500 myModel_graph.pb \u2502 \u251c\u2500\u2500\u2500 myModel-0.data-00000 \u2502 \u2514\u2500\u2500\u2500 myModel-0.meta \u251c\u2500\u2500\u2500 model_configs \u2502 \u251c\u2500\u2500\u2500 model_configs.json \u2502 \u2514\u2500\u2500\u2500 myModelConfig.json \u251c\u2500\u2500\u2500 data \u2502 \u251c\u2500\u2500\u2500 data.json \u2502 \u2514\u2500\u2500\u2500 myData \u2502 \u251c\u2500\u2500\u2500 myData.json \u2502 \u2514\u2500\u2500\u2500 myData_np_arrays.npz \u2514\u2500\u2500\u2500 embeddings \u251c\u2500\u2500\u2500 embeddings.json \u2514\u2500\u2500\u2500 myEmbedding \u251c\u2500\u2500\u2500 myEmbedding.npy \u251c\u2500\u2500\u2500 myEmbedding_words.pkl_ \u2514\u2500\u2500\u2500 myEmbedding_words_to_index.pkl","title":"Overview"},{"location":"file structure/overview/#file-structure-overview","text":"Animius uses various files, ranging from configs to Tensorflow model checkpoints. This overview will briefly explain how and where each of the objects is stored by default when using the console (this does not apply when using Animius as a python library or when directories are provided). It should also be noted that all config files created by Animius are in JSON. When you start Animius for the first time, the console will prompt you to choose a directory as the storage space for resources. This directory will contain all the files with the exception of \\user-config.json being at the root directory.","title":"File Structure Overview"},{"location":"file structure/overview/#configjson","text":"It should be noted that there is a clear distinction between \\config.json and \\user-config.json . \\config.json serves as a template for \\user-config.json , which should be created either manually or automatically at first launch. This way, when the user pulls updates from git, the configs will not be overwritten.","title":"config.json"},{"location":"file structure/overview/#waifus-or-waifu-tachi","text":"A Waifu, as the name suggests, is a set of models that are linked together to create an artificial intelligence agent \u2014 a Waifu. While waifus are stored individually as JSON files in the waifus folder, the \\waifus.json file contains information on all waifus for console usage.","title":"Waifus (or Waifu-tachi)"},{"location":"file structure/overview/#models","text":"Unlike the Waifus, each model gets its own folder under the \\models\\ . A single file, \\models\\models.json stores information of all of the models. This also allows for models being stored outside of \\Models\\ (although this is strongly discouraged). For the sake of an example, we will have a single model named myModel . \\models\\myModel\\ will include a file \\Models\\myModel\\myModel.json containing its config. Model checkpoints and graphs will be stored in the same folder as myModel.json by default, while Tensorboard files will be stored in a folder defined by the user in model config.","title":"Models"},{"location":"file structure/overview/#model-configs","text":"Model configs, located under \\model_configs\\ have very similar structures as waifus: individual user-named JSON configs and a main model_configs.json . Each model config is an individual JSON file that is very similar to the config file of models, with the few exceptions of model-specific values such as names and epochs.","title":"Model Configs"},{"location":"file structure/overview/#data","text":"It is often encouraged to store data in their raw forms, such as audio or words, so they can always be regenerated after changes in model structure. Nevertheless, it may be more convenient to store parsed data as numpy arrays. The saved files will be found in the \\Data\\ folder within their individual folders indicated in \\data\\data.json . Each folder will contain a JSON config and a .npz file generated by numpy. When storing data, there are also the options of saving separate copies of the model config and word embedding. This is to prevent changes that may be incompatible with the parsed data, such as sequence lengths and token indexes. These individual copies will be stored in folders within the directory of the JSON config and the .npz file.","title":"Data"},{"location":"file structure/overview/#word-embeddings","text":"Embeddings are stored under the \\embeddings\\ folder with a \\embeddings\\embeddings.json config. Each embedding has an individual folder containing a .npy numpy ndarrary file and two .pkl pickle files. No individual JSON file is stored for embeddings.","title":"Word Embeddings"},{"location":"file structure/overview/#file-tree-example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Resources \u251c\u2500\u2500\u2500 waifus \u2502 \u251c\u2500\u2500\u2500 waifus.json \u2502 \u2514\u2500\u2500\u2500 yukino_waifu_config.json \u251c\u2500\u2500\u2500 models \u2502 \u251c\u2500\u2500\u2500 models.json \u2502 \u2514\u2500\u2500\u2500 myModel \u2502 \u251c\u2500\u2500\u2500 checkpoint \u2502 \u251c\u2500\u2500\u2500 myModel.json \u2502 \u251c\u2500\u2500\u2500 myModel_graph.pb \u2502 \u251c\u2500\u2500\u2500 myModel-0.data-00000 \u2502 \u2514\u2500\u2500\u2500 myModel-0.meta \u251c\u2500\u2500\u2500 model_configs \u2502 \u251c\u2500\u2500\u2500 model_configs.json \u2502 \u2514\u2500\u2500\u2500 myModelConfig.json \u251c\u2500\u2500\u2500 data \u2502 \u251c\u2500\u2500\u2500 data.json \u2502 \u2514\u2500\u2500\u2500 myData \u2502 \u251c\u2500\u2500\u2500 myData.json \u2502 \u2514\u2500\u2500\u2500 myData_np_arrays.npz \u2514\u2500\u2500\u2500 embeddings \u251c\u2500\u2500\u2500 embeddings.json \u2514\u2500\u2500\u2500 myEmbedding \u251c\u2500\u2500\u2500 myEmbedding.npy \u251c\u2500\u2500\u2500 myEmbedding_words.pkl_ \u2514\u2500\u2500\u2500 myEmbedding_words_to_index.pkl","title":"File tree example"},{"location":"network/authentication/","text":"Network Authentication Since the server and client are able to communicate across different networks, authentication is required to prevent abusing hardware or stealing model information. No one touches my waifu. WIP","title":"Authentication"},{"location":"network/authentication/#network-authentication","text":"Since the server and client are able to communicate across different networks, authentication is required to prevent abusing hardware or stealing model information. No one touches my waifu. WIP","title":"Network Authentication"},{"location":"network/overview/","text":"Network Overview In addition to using the python console, Animius can also be accessed with a network TCP socket. This allows for user-friendly or extensive GUIs and clients written in other languages. Server The server has the same requirements as using the python console, with addition of networking. (still writing the script) Client The client has no requirements other than networking. Python is not needed. To communicate with the server, simply use TCP messages. Although it is recommended for security, the client and the server are not required to be on the same network. See (gundamMC/Waifu-GUI) for a C# WPF example. Commands The server takes in JSON messages with the following format: 1 2 3 4 5 6 7 8 { \"command\" : \"foo\" , \"id\" : \"01:01\" , \"arguments\" : { \"boo\" : 2 , \"bar\" : \"MAX\" } } command takes in a string that specifies a function defined by the server while the dictionary arguments define the keyword arguments. For instance, the above code represents foo --boo=2 --bar='MAX' . id is simply a string identifier for the client. Responses The server responds in the following format: 1 2 3 4 5 6 7 8 9 { \"id\" : \"01:01\" , \"status\" : 0 , \"message\" : \"success\" , \"data\" : { \"foo\" : 2 , \"boo\" : \"bar\" } } id is the identifier that the client sends. The server simply returns the same id. status is a code that represents the following values 0 -> success 1 -> failure 2 -> argument error 3- > error (An argument error occurs when an argument is missing or has the wrong type, in contrary to an error) message is simply a message that provides additional information on the status. In failure or an error, it would provide the cause of such failure or error. data is a dictionary that contains the return values of the command. If the user queries for information on a model, data would include the information of the model. Note that data is subject to change for each command, while some commands may not even return anything in data (an empty dictionary will be used in that case to ensure that all responses contain a data ).","title":"Overview"},{"location":"network/overview/#network-overview","text":"In addition to using the python console, Animius can also be accessed with a network TCP socket. This allows for user-friendly or extensive GUIs and clients written in other languages.","title":"Network Overview"},{"location":"network/overview/#server","text":"The server has the same requirements as using the python console, with addition of networking. (still writing the script)","title":"Server"},{"location":"network/overview/#client","text":"The client has no requirements other than networking. Python is not needed. To communicate with the server, simply use TCP messages. Although it is recommended for security, the client and the server are not required to be on the same network. See (gundamMC/Waifu-GUI) for a C# WPF example.","title":"Client"},{"location":"network/overview/#commands","text":"The server takes in JSON messages with the following format: 1 2 3 4 5 6 7 8 { \"command\" : \"foo\" , \"id\" : \"01:01\" , \"arguments\" : { \"boo\" : 2 , \"bar\" : \"MAX\" } } command takes in a string that specifies a function defined by the server while the dictionary arguments define the keyword arguments. For instance, the above code represents foo --boo=2 --bar='MAX' . id is simply a string identifier for the client.","title":"Commands"},{"location":"network/overview/#responses","text":"The server responds in the following format: 1 2 3 4 5 6 7 8 9 { \"id\" : \"01:01\" , \"status\" : 0 , \"message\" : \"success\" , \"data\" : { \"foo\" : 2 , \"boo\" : \"bar\" } } id is the identifier that the client sends. The server simply returns the same id. status is a code that represents the following values 0 -> success 1 -> failure 2 -> argument error 3- > error (An argument error occurs when an argument is missing or has the wrong type, in contrary to an error) message is simply a message that provides additional information on the status. In failure or an error, it would provide the cause of such failure or error. data is a dictionary that contains the return values of the command. If the user queries for information on a model, data would include the information of the model. Note that data is subject to change for each command, while some commands may not even return anything in data (an empty dictionary will be used in that case to ensure that all responses contain a data ).","title":"Responses"}]}