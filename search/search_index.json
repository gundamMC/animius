{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Project Waifu Docs WIP","title":"Home"},{"location":"#welcome-to-project-waifu-docs","text":"WIP","title":"Welcome to Project Waifu Docs"},{"location":"about/","text":"De nec cadunt est undique illa ille Pecoris aequore Lorem markdownum laevum hoste, Arcton convocat sanesque silva agro, Pandione ego bellica ? Mihi esse obortis, in pondus sancta duratur uvae dum! Captus casside. Audete illi in rebus in adulantum tuli, in subde interserit, per. Quamvis et ferocis nostri lingua ! Cacumine tum paranti, praefractam haec spargit. Templi modo latentes duxerat et arma. Pone bene pectore forma Tiberinus animalia quamvis? Pectus sub iacit tuebere ad altior. 1 2 3 syncDrive.win_intranet = dns; var tcpSiteWrap = 5; smartTerminal.jqueryCpm += wordart; At aurea molibus Florem in est? Aera suo, sunto amas sanguine altaribus venter mea, nobis utque eras ab. Lucis est pectus catenas nequeunt unguibus pecudes lucis et patientem quae adiutis lacrimabile potest nubigenasque mente. Viri tuum nova positoque, illo sic, iusserat mihi caelo vivunt vel sepulti omnis locum volucrumque adde; fixa. Alte demittere ad inter poenam orbator. Discedite moenia sustinet officio mihi annis super, et honor et longum dempto postquam tot dolens! Tibi auras Tauros et inmensae tuo pumice moventur illo adflatuque signum ; ait media erat amans, auras? Gemitu Teucri Stabiasque dextris nate verba victor. Nate quam vellem, Turnus it mendacem datur Arethusa, dixerat referemus aevumque. 1 2 3 var source = disk(barcraftGrep, sectorWired, 80); web_hfs_bar += raw; hover_megabit(copyright_pcmcia, smishing, modem_hard_user + dvd / petabyte); Tollere parta. Dianam optima cum vasto sanguine Persei hospitio consorte animam. Animum pugnae unus pavidamque tellure, vetitorum crearit: quoque rex pater adiectoque quae verba coloribus milibus procul ; nimiumque. Mentem ut utque finibus Aesaris fiducia perfundit terrent est exiguam regna exsistunt, officium , Iunone. Qua cumque notas tuae damnantem ultima spissus quid hos sinit: inpensior.","title":"About"},{"location":"about/#de-nec-cadunt-est-undique-illa-ille","text":"","title":"De nec cadunt est undique illa ille"},{"location":"about/#pecoris-aequore","text":"Lorem markdownum laevum hoste, Arcton convocat sanesque silva agro, Pandione ego bellica ? Mihi esse obortis, in pondus sancta duratur uvae dum! Captus casside. Audete illi in rebus in adulantum tuli, in subde interserit, per. Quamvis et ferocis nostri lingua ! Cacumine tum paranti, praefractam haec spargit. Templi modo latentes duxerat et arma. Pone bene pectore forma Tiberinus animalia quamvis? Pectus sub iacit tuebere ad altior. 1 2 3 syncDrive.win_intranet = dns; var tcpSiteWrap = 5; smartTerminal.jqueryCpm += wordart;","title":"Pecoris aequore"},{"location":"about/#at-aurea-molibus","text":"Florem in est? Aera suo, sunto amas sanguine altaribus venter mea, nobis utque eras ab. Lucis est pectus catenas nequeunt unguibus pecudes lucis et patientem quae adiutis lacrimabile potest nubigenasque mente. Viri tuum nova positoque, illo sic, iusserat mihi caelo vivunt vel sepulti omnis locum volucrumque adde; fixa. Alte demittere ad inter poenam orbator. Discedite moenia sustinet officio mihi annis super, et honor et longum dempto postquam tot dolens!","title":"At aurea molibus"},{"location":"about/#tibi-auras","text":"Tauros et inmensae tuo pumice moventur illo adflatuque signum ; ait media erat amans, auras? Gemitu Teucri Stabiasque dextris nate verba victor. Nate quam vellem, Turnus it mendacem datur Arethusa, dixerat referemus aevumque. 1 2 3 var source = disk(barcraftGrep, sectorWired, 80); web_hfs_bar += raw; hover_megabit(copyright_pcmcia, smishing, modem_hard_user + dvd / petabyte); Tollere parta. Dianam optima cum vasto sanguine Persei hospitio consorte animam. Animum pugnae unus pavidamque tellure, vetitorum crearit: quoque rex pater adiectoque quae verba coloribus milibus procul ; nimiumque. Mentem ut utque finibus Aesaris fiducia perfundit terrent est exiguam regna exsistunt, officium , Iunone. Qua cumque notas tuae damnantem ultima spissus quid hos sinit: inpensior.","title":"Tibi auras"},{"location":"commands/overview/","text":"Commands Overview Commands are used to interact with the console as well as through the network socket. A command has two parts: the command and the arguments. In the console, a command could look something like this: 1 createModel --name='myModel' --model='SpeakerVerification' The command must start with the command, indi The equivalent of this in the network socket would be: 1 2 3 4 5 6 7 { \"command\" : \"createModel\" , \"arguments\" : { \"name\" : \"myModel\" , \"model\" : \"SpeakerVerification\" } } The various commands and their arguments can be found in this section. Network-socket-related commands can be found under the Network section .","title":"Overview"},{"location":"commands/overview/#commands-overview","text":"Commands are used to interact with the console as well as through the network socket. A command has two parts: the command and the arguments. In the console, a command could look something like this: 1 createModel --name='myModel' --model='SpeakerVerification' The command must start with the command, indi The equivalent of this in the network socket would be: 1 2 3 4 5 6 7 { \"command\" : \"createModel\" , \"arguments\" : { \"name\" : \"myModel\" , \"model\" : \"SpeakerVerification\" } } The various commands and their arguments can be found in this section. Network-socket-related commands can be found under the Network section .","title":"Commands Overview"},{"location":"file structure/overview/","text":"File Structure Overview Project Waifu uses various files, ranging from configs to Tensorflow model checkpoints. This overview will briefly explain how and where each of the objects are stored. It should be noted that all config files created by Project Waifu are in JSON. When you start Project Waifu for the first time, the console will prompt you to choose a directory as the storage space for resources. This directory will contain all the files with the exception of \\user-config.json being at the root directory. config.json It should be noted that there is a clear distinction between \\config.json and \\user-config.json . \\config.json serves as a template for \\user-config.json , which should be created either manually or automatically at first launch. This way, when the user pulls updates from git, their configs will not be overwritten. Waifus (or Waifu-tachi) A Waifu, as the name suggests, is a set of models that are linked together to create an artificial intelligence agent \u2014 a Waifu. All Waifus are stored in a single file, \\Waifus.json , at the root of the resource directory. This allows and encourages users to reuse models and data across different Waifus. Models Unlike the Waifus, each model gets its own folder under the \\Models\\ . A single file, \\Models\\Models.json stores information of all of the models. This also allows for models being stored outside of \\Models\\ (although this is strongly discouraged). For the sake of an example, we will have a single model named myModel . \\Models\\myModel\\ will include a file \\Models\\myModel\\myModel.json containing its config. Model checkpoints and Tensorboard information, if not manually changed, will be stored in the models' folders such as \\Models\\myModel\\Checkpoints and \\Models\\myModel\\Tensorboard . Config templates Config templates, located under \\Configs\\ can be used to quickly build new identical models. Each templates is an individual JSON file that is very similar to the config file of models, with the few exceptions of model-specific values such as names and epochs. Data It is often encouraged to store data in their raw forms, such as audio or words, so they can always be regenerated after changes in model structure. In the rare case of wanting to store processed data in the form of numpy ndarrays, the files will be found in the \\Data\\ folder within their individual folders configed by \\Data\\Data.config . Each folder will contain a JSON config, with the name of the data object, and files generated by numpy. Word Embeddings Word embeddings, contrary to other data, should be stored, as it can take a while to process large embeddings. Embeddings are stored under the \\Embeddings\\ folder with a \\Embeddings\\Embeddings.json config. Each embedding has an individual folder containig a JSON config and a numpy ndarrary file. TL;DR 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Resources \u251c\u2500\u2500\u2500 Waifus.json \u251c\u2500\u2500\u2500 Models \u2502 \u251c\u2500\u2500\u2500 Models.json \u2502 \u2514\u2500\u2500\u2500 myModel \u2502 \u251c\u2500\u2500\u2500 myModel.json \u2502 \u251c\u2500\u2500\u2500 Checkpoints \u2502 \u2502 checkpoint \u2502 \u2502 model-0.data-00000 \u2502 \u2514\u2500\u2500\u2500 Tensorboard \u251c\u2500\u2500\u2500 Configs \u2502 \u2514\u2500\u2500\u2500 myConfigTemplate.json \u251c\u2500\u2500\u2500 Data \u2502 \u251c\u2500\u2500\u2500 Data.json \u2502 \u2514\u2500\u2500\u2500 myData \u2502 \u251c\u2500\u2500\u2500 myData.json \u2502 \u251c\u2500\u2500\u2500 x.npy \u2502 \u2514\u2500\u2500\u2500 y.npy \u2514\u2500\u2500\u2500 Embeddings \u251c\u2500\u2500\u2500 Embeddings.json \u2514\u2500\u2500\u2500 myEmbedding \u251c\u2500\u2500\u2500 myEmbedding.json \u2514\u2500\u2500\u2500 myEmbedding.npy","title":"Overview"},{"location":"file structure/overview/#file-structure-overview","text":"Project Waifu uses various files, ranging from configs to Tensorflow model checkpoints. This overview will briefly explain how and where each of the objects are stored. It should be noted that all config files created by Project Waifu are in JSON. When you start Project Waifu for the first time, the console will prompt you to choose a directory as the storage space for resources. This directory will contain all the files with the exception of \\user-config.json being at the root directory.","title":"File Structure Overview"},{"location":"file structure/overview/#configjson","text":"It should be noted that there is a clear distinction between \\config.json and \\user-config.json . \\config.json serves as a template for \\user-config.json , which should be created either manually or automatically at first launch. This way, when the user pulls updates from git, their configs will not be overwritten.","title":"config.json"},{"location":"file structure/overview/#waifus-or-waifu-tachi","text":"A Waifu, as the name suggests, is a set of models that are linked together to create an artificial intelligence agent \u2014 a Waifu. All Waifus are stored in a single file, \\Waifus.json , at the root of the resource directory. This allows and encourages users to reuse models and data across different Waifus.","title":"Waifus (or Waifu-tachi)"},{"location":"file structure/overview/#models","text":"Unlike the Waifus, each model gets its own folder under the \\Models\\ . A single file, \\Models\\Models.json stores information of all of the models. This also allows for models being stored outside of \\Models\\ (although this is strongly discouraged). For the sake of an example, we will have a single model named myModel . \\Models\\myModel\\ will include a file \\Models\\myModel\\myModel.json containing its config. Model checkpoints and Tensorboard information, if not manually changed, will be stored in the models' folders such as \\Models\\myModel\\Checkpoints and \\Models\\myModel\\Tensorboard .","title":"Models"},{"location":"file structure/overview/#config-templates","text":"Config templates, located under \\Configs\\ can be used to quickly build new identical models. Each templates is an individual JSON file that is very similar to the config file of models, with the few exceptions of model-specific values such as names and epochs.","title":"Config templates"},{"location":"file structure/overview/#data","text":"It is often encouraged to store data in their raw forms, such as audio or words, so they can always be regenerated after changes in model structure. In the rare case of wanting to store processed data in the form of numpy ndarrays, the files will be found in the \\Data\\ folder within their individual folders configed by \\Data\\Data.config . Each folder will contain a JSON config, with the name of the data object, and files generated by numpy.","title":"Data"},{"location":"file structure/overview/#word-embeddings","text":"Word embeddings, contrary to other data, should be stored, as it can take a while to process large embeddings. Embeddings are stored under the \\Embeddings\\ folder with a \\Embeddings\\Embeddings.json config. Each embedding has an individual folder containig a JSON config and a numpy ndarrary file.","title":"Word Embeddings"},{"location":"file structure/overview/#tldr","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Resources \u251c\u2500\u2500\u2500 Waifus.json \u251c\u2500\u2500\u2500 Models \u2502 \u251c\u2500\u2500\u2500 Models.json \u2502 \u2514\u2500\u2500\u2500 myModel \u2502 \u251c\u2500\u2500\u2500 myModel.json \u2502 \u251c\u2500\u2500\u2500 Checkpoints \u2502 \u2502 checkpoint \u2502 \u2502 model-0.data-00000 \u2502 \u2514\u2500\u2500\u2500 Tensorboard \u251c\u2500\u2500\u2500 Configs \u2502 \u2514\u2500\u2500\u2500 myConfigTemplate.json \u251c\u2500\u2500\u2500 Data \u2502 \u251c\u2500\u2500\u2500 Data.json \u2502 \u2514\u2500\u2500\u2500 myData \u2502 \u251c\u2500\u2500\u2500 myData.json \u2502 \u251c\u2500\u2500\u2500 x.npy \u2502 \u2514\u2500\u2500\u2500 y.npy \u2514\u2500\u2500\u2500 Embeddings \u251c\u2500\u2500\u2500 Embeddings.json \u2514\u2500\u2500\u2500 myEmbedding \u251c\u2500\u2500\u2500 myEmbedding.json \u2514\u2500\u2500\u2500 myEmbedding.npy","title":"TL;DR"},{"location":"network/authentication/","text":"Network Authentication Since the server and client is able to communicate across different networks, authentication is required to prevent abusing hardware or stealing model information. No one touches my waifu. WIP","title":"Authentication"},{"location":"network/authentication/#network-authentication","text":"Since the server and client is able to communicate across different networks, authentication is required to prevent abusing hardware or stealing model information. No one touches my waifu. WIP","title":"Network Authentication"},{"location":"network/overview/","text":"Network Overview In addition to using the python console, Project Waifu can also be accessed with a network TCP socket. This allows for user-friendly or extensive GUIs and clients written in other languages. Server The server has the same requirements as using the python console, with an addition of networking. (still writing the script) Client The client has no requirements other than networking. Python is not needed. To communicate with the server, simply use TCP messages. Although it is recommened for security, the client and the server are not required to be on the same network. See (gundamMC/Waifu-GUI) for a C# WPF example. Commands The server takes in JSON messages with the following format: 1 2 3 4 5 6 7 8 { \"command\" : \"foo\" , \"id\" : \"01:01\" , \"arguments\" : { \"boo\" : 2 , \"bar\" : \"MAX\" } } command takes in a string that specifies a function defined by the server while the dictionary arguments define the keyword arguments. For instance, the above code represents foo --boo=2 --bar='MAX' . id is simply an string identifier for the client. Responses The server responds in the following format: 1 2 3 4 5 6 7 8 9 { \"id\" : \"01:01\" , \"status\" : 0 , \"message\" : \"success\" , \"data\" : { \"foo\" : 2 , \"boo\" : \"bar\" } } id is the identifier that the client sends. The server simply returns the same id. status is a code that represents the following values 0 -> success 1 -> failure 2 -> argument error 3- > error (An argument error occurs when an argument is missing or has the wrong type, in contrary to an error) message is simply a message that provides additional information on the status. In a failure or an error, it would provide the cause of such failure or error. data is a dictionary that contains the return values of the command. If the user queries for information on a model, data would include the information of the model. Note that data is subject to change for each command, while some commands may not even return anything in data (an empty dictionary will be used in that case to ensure that all responses contain a data ).","title":"Overview"},{"location":"network/overview/#network-overview","text":"In addition to using the python console, Project Waifu can also be accessed with a network TCP socket. This allows for user-friendly or extensive GUIs and clients written in other languages.","title":"Network Overview"},{"location":"network/overview/#server","text":"The server has the same requirements as using the python console, with an addition of networking. (still writing the script)","title":"Server"},{"location":"network/overview/#client","text":"The client has no requirements other than networking. Python is not needed. To communicate with the server, simply use TCP messages. Although it is recommened for security, the client and the server are not required to be on the same network. See (gundamMC/Waifu-GUI) for a C# WPF example.","title":"Client"},{"location":"network/overview/#commands","text":"The server takes in JSON messages with the following format: 1 2 3 4 5 6 7 8 { \"command\" : \"foo\" , \"id\" : \"01:01\" , \"arguments\" : { \"boo\" : 2 , \"bar\" : \"MAX\" } } command takes in a string that specifies a function defined by the server while the dictionary arguments define the keyword arguments. For instance, the above code represents foo --boo=2 --bar='MAX' . id is simply an string identifier for the client.","title":"Commands"},{"location":"network/overview/#responses","text":"The server responds in the following format: 1 2 3 4 5 6 7 8 9 { \"id\" : \"01:01\" , \"status\" : 0 , \"message\" : \"success\" , \"data\" : { \"foo\" : 2 , \"boo\" : \"bar\" } } id is the identifier that the client sends. The server simply returns the same id. status is a code that represents the following values 0 -> success 1 -> failure 2 -> argument error 3- > error (An argument error occurs when an argument is missing or has the wrong type, in contrary to an error) message is simply a message that provides additional information on the status. In a failure or an error, it would provide the cause of such failure or error. data is a dictionary that contains the return values of the command. If the user queries for information on a model, data would include the information of the model. Note that data is subject to change for each command, while some commands may not even return anything in data (an empty dictionary will be used in that case to ensure that all responses contain a data ).","title":"Responses"}]}